// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shinnosuke-K/github-dev-insight/ent/issue"
	"github.com/shinnosuke-K/github-dev-insight/ent/pullrequest"
	"github.com/shinnosuke-K/github-dev-insight/ent/repository"
)

// RepositoryCreate is the builder for creating a Repository entity.
type RepositoryCreate struct {
	config
	mutation *RepositoryMutation
	hooks    []Hook
}

// SetGithubID sets the "github_id" field.
func (rc *RepositoryCreate) SetGithubID(s string) *RepositoryCreate {
	rc.mutation.SetGithubID(s)
	return rc
}

// SetOwner sets the "owner" field.
func (rc *RepositoryCreate) SetOwner(s string) *RepositoryCreate {
	rc.mutation.SetOwner(s)
	return rc
}

// SetName sets the "name" field.
func (rc *RepositoryCreate) SetName(s string) *RepositoryCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetDescription sets the "description" field.
func (rc *RepositoryCreate) SetDescription(s string) *RepositoryCreate {
	rc.mutation.SetDescription(s)
	return rc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableDescription(s *string) *RepositoryCreate {
	if s != nil {
		rc.SetDescription(*s)
	}
	return rc
}

// SetTotalPr sets the "total_pr" field.
func (rc *RepositoryCreate) SetTotalPr(i int64) *RepositoryCreate {
	rc.mutation.SetTotalPr(i)
	return rc
}

// SetNillableTotalPr sets the "total_pr" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableTotalPr(i *int64) *RepositoryCreate {
	if i != nil {
		rc.SetTotalPr(*i)
	}
	return rc
}

// SetTotalIssue sets the "total_issue" field.
func (rc *RepositoryCreate) SetTotalIssue(i int64) *RepositoryCreate {
	rc.mutation.SetTotalIssue(i)
	return rc
}

// SetNillableTotalIssue sets the "total_issue" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableTotalIssue(i *int64) *RepositoryCreate {
	if i != nil {
		rc.SetTotalIssue(*i)
	}
	return rc
}

// SetGetPullRequest sets the "get_pull_request" field.
func (rc *RepositoryCreate) SetGetPullRequest(b bool) *RepositoryCreate {
	rc.mutation.SetGetPullRequest(b)
	return rc
}

// SetNillableGetPullRequest sets the "get_pull_request" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableGetPullRequest(b *bool) *RepositoryCreate {
	if b != nil {
		rc.SetGetPullRequest(*b)
	}
	return rc
}

// SetGetIssue sets the "get_issue" field.
func (rc *RepositoryCreate) SetGetIssue(b bool) *RepositoryCreate {
	rc.mutation.SetGetIssue(b)
	return rc
}

// SetNillableGetIssue sets the "get_issue" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableGetIssue(b *bool) *RepositoryCreate {
	if b != nil {
		rc.SetGetIssue(*b)
	}
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *RepositoryCreate) SetCreatedAt(t time.Time) *RepositoryCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableCreatedAt(t *time.Time) *RepositoryCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RepositoryCreate) SetUpdatedAt(t time.Time) *RepositoryCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableUpdatedAt(t *time.Time) *RepositoryCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetPushedAt sets the "pushed_at" field.
func (rc *RepositoryCreate) SetPushedAt(t time.Time) *RepositoryCreate {
	rc.mutation.SetPushedAt(t)
	return rc
}

// SetNillablePushedAt sets the "pushed_at" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillablePushedAt(t *time.Time) *RepositoryCreate {
	if t != nil {
		rc.SetPushedAt(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RepositoryCreate) SetID(u uuid.UUID) *RepositoryCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RepositoryCreate) SetNillableID(u *uuid.UUID) *RepositoryCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// AddPullRequestIDs adds the "pull_requests" edge to the PullRequest entity by IDs.
func (rc *RepositoryCreate) AddPullRequestIDs(ids ...uuid.UUID) *RepositoryCreate {
	rc.mutation.AddPullRequestIDs(ids...)
	return rc
}

// AddPullRequests adds the "pull_requests" edges to the PullRequest entity.
func (rc *RepositoryCreate) AddPullRequests(p ...*PullRequest) *RepositoryCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rc.AddPullRequestIDs(ids...)
}

// AddIssueIDs adds the "issues" edge to the Issue entity by IDs.
func (rc *RepositoryCreate) AddIssueIDs(ids ...uuid.UUID) *RepositoryCreate {
	rc.mutation.AddIssueIDs(ids...)
	return rc
}

// AddIssues adds the "issues" edges to the Issue entity.
func (rc *RepositoryCreate) AddIssues(i ...*Issue) *RepositoryCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return rc.AddIssueIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (rc *RepositoryCreate) Mutation() *RepositoryMutation {
	return rc.mutation
}

// Save creates the Repository in the database.
func (rc *RepositoryCreate) Save(ctx context.Context) (*Repository, error) {
	rc.defaults()
	return withHooks[*Repository, RepositoryMutation](ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RepositoryCreate) SaveX(ctx context.Context) *Repository {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RepositoryCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RepositoryCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RepositoryCreate) defaults() {
	if _, ok := rc.mutation.TotalPr(); !ok {
		v := repository.DefaultTotalPr
		rc.mutation.SetTotalPr(v)
	}
	if _, ok := rc.mutation.TotalIssue(); !ok {
		v := repository.DefaultTotalIssue
		rc.mutation.SetTotalIssue(v)
	}
	if _, ok := rc.mutation.GetPullRequest(); !ok {
		v := repository.DefaultGetPullRequest
		rc.mutation.SetGetPullRequest(v)
	}
	if _, ok := rc.mutation.GetIssue(); !ok {
		v := repository.DefaultGetIssue
		rc.mutation.SetGetIssue(v)
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := repository.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := repository.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.PushedAt(); !ok {
		v := repository.DefaultPushedAt()
		rc.mutation.SetPushedAt(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := repository.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RepositoryCreate) check() error {
	if _, ok := rc.mutation.GithubID(); !ok {
		return &ValidationError{Name: "github_id", err: errors.New(`ent: missing required field "Repository.github_id"`)}
	}
	if v, ok := rc.mutation.GithubID(); ok {
		if err := repository.GithubIDValidator(v); err != nil {
			return &ValidationError{Name: "github_id", err: fmt.Errorf(`ent: validator failed for field "Repository.github_id": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Owner(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required field "Repository.owner"`)}
	}
	if v, ok := rc.mutation.Owner(); ok {
		if err := repository.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf(`ent: validator failed for field "Repository.owner": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Repository.name"`)}
	}
	if v, ok := rc.mutation.Name(); ok {
		if err := repository.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Repository.name": %w`, err)}
		}
	}
	if _, ok := rc.mutation.TotalPr(); !ok {
		return &ValidationError{Name: "total_pr", err: errors.New(`ent: missing required field "Repository.total_pr"`)}
	}
	if v, ok := rc.mutation.TotalPr(); ok {
		if err := repository.TotalPrValidator(v); err != nil {
			return &ValidationError{Name: "total_pr", err: fmt.Errorf(`ent: validator failed for field "Repository.total_pr": %w`, err)}
		}
	}
	if _, ok := rc.mutation.TotalIssue(); !ok {
		return &ValidationError{Name: "total_issue", err: errors.New(`ent: missing required field "Repository.total_issue"`)}
	}
	if v, ok := rc.mutation.TotalIssue(); ok {
		if err := repository.TotalIssueValidator(v); err != nil {
			return &ValidationError{Name: "total_issue", err: fmt.Errorf(`ent: validator failed for field "Repository.total_issue": %w`, err)}
		}
	}
	if _, ok := rc.mutation.GetPullRequest(); !ok {
		return &ValidationError{Name: "get_pull_request", err: errors.New(`ent: missing required field "Repository.get_pull_request"`)}
	}
	if _, ok := rc.mutation.GetIssue(); !ok {
		return &ValidationError{Name: "get_issue", err: errors.New(`ent: missing required field "Repository.get_issue"`)}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Repository.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Repository.updated_at"`)}
	}
	if _, ok := rc.mutation.PushedAt(); !ok {
		return &ValidationError{Name: "pushed_at", err: errors.New(`ent: missing required field "Repository.pushed_at"`)}
	}
	return nil
}

func (rc *RepositoryCreate) sqlSave(ctx context.Context) (*Repository, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RepositoryCreate) createSpec() (*Repository, *sqlgraph.CreateSpec) {
	var (
		_node = &Repository{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(repository.Table, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeUUID))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.GithubID(); ok {
		_spec.SetField(repository.FieldGithubID, field.TypeString, value)
		_node.GithubID = value
	}
	if value, ok := rc.mutation.Owner(); ok {
		_spec.SetField(repository.FieldOwner, field.TypeString, value)
		_node.Owner = value
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(repository.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.Description(); ok {
		_spec.SetField(repository.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rc.mutation.TotalPr(); ok {
		_spec.SetField(repository.FieldTotalPr, field.TypeInt64, value)
		_node.TotalPr = value
	}
	if value, ok := rc.mutation.TotalIssue(); ok {
		_spec.SetField(repository.FieldTotalIssue, field.TypeInt64, value)
		_node.TotalIssue = value
	}
	if value, ok := rc.mutation.GetPullRequest(); ok {
		_spec.SetField(repository.FieldGetPullRequest, field.TypeBool, value)
		_node.GetPullRequest = value
	}
	if value, ok := rc.mutation.GetIssue(); ok {
		_spec.SetField(repository.FieldGetIssue, field.TypeBool, value)
		_node.GetIssue = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(repository.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(repository.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.PushedAt(); ok {
		_spec.SetField(repository.FieldPushedAt, field.TypeTime, value)
		_node.PushedAt = value
	}
	if nodes := rc.mutation.PullRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.PullRequestsTable,
			Columns: []string{repository.PullRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pullrequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.IssuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.IssuesTable,
			Columns: []string{repository.IssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: issue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RepositoryCreateBulk is the builder for creating many Repository entities in bulk.
type RepositoryCreateBulk struct {
	config
	builders []*RepositoryCreate
}

// Save creates the Repository entities in the database.
func (rcb *RepositoryCreateBulk) Save(ctx context.Context) ([]*Repository, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Repository, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RepositoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RepositoryCreateBulk) SaveX(ctx context.Context) []*Repository {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RepositoryCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RepositoryCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
