// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shinnosuke-K/github-dev-insight/ent/commit"
	"github.com/shinnosuke-K/github-dev-insight/ent/predicate"
	"github.com/shinnosuke-K/github-dev-insight/ent/pullrequest"
	"github.com/shinnosuke-K/github-dev-insight/ent/repository"
)

// PullRequestUpdate is the builder for updating PullRequest entities.
type PullRequestUpdate struct {
	config
	hooks    []Hook
	mutation *PullRequestMutation
}

// Where appends a list predicates to the PullRequestUpdate builder.
func (pru *PullRequestUpdate) Where(ps ...predicate.PullRequest) *PullRequestUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetRepositoryID sets the "repository_id" field.
func (pru *PullRequestUpdate) SetRepositoryID(s string) *PullRequestUpdate {
	pru.mutation.SetRepositoryID(s)
	return pru
}

// SetGithubID sets the "github_id" field.
func (pru *PullRequestUpdate) SetGithubID(s string) *PullRequestUpdate {
	pru.mutation.SetGithubID(s)
	return pru
}

// SetTitle sets the "title" field.
func (pru *PullRequestUpdate) SetTitle(s string) *PullRequestUpdate {
	pru.mutation.SetTitle(s)
	return pru
}

// SetTotalCommits sets the "total_commits" field.
func (pru *PullRequestUpdate) SetTotalCommits(i int64) *PullRequestUpdate {
	pru.mutation.ResetTotalCommits()
	pru.mutation.SetTotalCommits(i)
	return pru
}

// SetNillableTotalCommits sets the "total_commits" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableTotalCommits(i *int64) *PullRequestUpdate {
	if i != nil {
		pru.SetTotalCommits(*i)
	}
	return pru
}

// AddTotalCommits adds i to the "total_commits" field.
func (pru *PullRequestUpdate) AddTotalCommits(i int64) *PullRequestUpdate {
	pru.mutation.AddTotalCommits(i)
	return pru
}

// SetCreatedAt sets the "created_at" field.
func (pru *PullRequestUpdate) SetCreatedAt(t time.Time) *PullRequestUpdate {
	pru.mutation.SetCreatedAt(t)
	return pru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableCreatedAt(t *time.Time) *PullRequestUpdate {
	if t != nil {
		pru.SetCreatedAt(*t)
	}
	return pru
}

// SetUpdatedAt sets the "updated_at" field.
func (pru *PullRequestUpdate) SetUpdatedAt(t time.Time) *PullRequestUpdate {
	pru.mutation.SetUpdatedAt(t)
	return pru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableUpdatedAt(t *time.Time) *PullRequestUpdate {
	if t != nil {
		pru.SetUpdatedAt(*t)
	}
	return pru
}

// SetClosedAt sets the "closed_at" field.
func (pru *PullRequestUpdate) SetClosedAt(t time.Time) *PullRequestUpdate {
	pru.mutation.SetClosedAt(t)
	return pru
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableClosedAt(t *time.Time) *PullRequestUpdate {
	if t != nil {
		pru.SetClosedAt(*t)
	}
	return pru
}

// SetMergedAt sets the "merged_at" field.
func (pru *PullRequestUpdate) SetMergedAt(t time.Time) *PullRequestUpdate {
	pru.mutation.SetMergedAt(t)
	return pru
}

// SetNillableMergedAt sets the "merged_at" field if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableMergedAt(t *time.Time) *PullRequestUpdate {
	if t != nil {
		pru.SetMergedAt(*t)
	}
	return pru
}

// AddCommitIDs adds the "commits" edge to the Commit entity by IDs.
func (pru *PullRequestUpdate) AddCommitIDs(ids ...int) *PullRequestUpdate {
	pru.mutation.AddCommitIDs(ids...)
	return pru
}

// AddCommits adds the "commits" edges to the Commit entity.
func (pru *PullRequestUpdate) AddCommits(c ...*Commit) *PullRequestUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pru.AddCommitIDs(ids...)
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (pru *PullRequestUpdate) SetRepositoryID(id int) *PullRequestUpdate {
	pru.mutation.SetRepositoryID(id)
	return pru
}

// SetNillableRepositoryID sets the "repository" edge to the Repository entity by ID if the given value is not nil.
func (pru *PullRequestUpdate) SetNillableRepositoryID(id *int) *PullRequestUpdate {
	if id != nil {
		pru = pru.SetRepositoryID(*id)
	}
	return pru
}

// SetRepository sets the "repository" edge to the Repository entity.
func (pru *PullRequestUpdate) SetRepository(r *Repository) *PullRequestUpdate {
	return pru.SetRepositoryID(r.ID)
}

// Mutation returns the PullRequestMutation object of the builder.
func (pru *PullRequestUpdate) Mutation() *PullRequestMutation {
	return pru.mutation
}

// ClearCommits clears all "commits" edges to the Commit entity.
func (pru *PullRequestUpdate) ClearCommits() *PullRequestUpdate {
	pru.mutation.ClearCommits()
	return pru
}

// RemoveCommitIDs removes the "commits" edge to Commit entities by IDs.
func (pru *PullRequestUpdate) RemoveCommitIDs(ids ...int) *PullRequestUpdate {
	pru.mutation.RemoveCommitIDs(ids...)
	return pru
}

// RemoveCommits removes "commits" edges to Commit entities.
func (pru *PullRequestUpdate) RemoveCommits(c ...*Commit) *PullRequestUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pru.RemoveCommitIDs(ids...)
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (pru *PullRequestUpdate) ClearRepository() *PullRequestUpdate {
	pru.mutation.ClearRepository()
	return pru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PullRequestUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pru.hooks) == 0 {
		if err = pru.check(); err != nil {
			return 0, err
		}
		affected, err = pru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PullRequestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pru.check(); err != nil {
				return 0, err
			}
			pru.mutation = mutation
			affected, err = pru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pru.hooks) - 1; i >= 0; i-- {
			if pru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PullRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PullRequestUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PullRequestUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pru *PullRequestUpdate) check() error {
	if v, ok := pru.mutation.RepositoryID(); ok {
		if err := pullrequest.RepositoryIDValidator(v); err != nil {
			return &ValidationError{Name: "repository_id", err: fmt.Errorf("ent: validator failed for field \"repository_id\": %w", err)}
		}
	}
	if v, ok := pru.mutation.GithubID(); ok {
		if err := pullrequest.GithubIDValidator(v); err != nil {
			return &ValidationError{Name: "github_id", err: fmt.Errorf("ent: validator failed for field \"github_id\": %w", err)}
		}
	}
	if v, ok := pru.mutation.Title(); ok {
		if err := pullrequest.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := pru.mutation.TotalCommits(); ok {
		if err := pullrequest.TotalCommitsValidator(v); err != nil {
			return &ValidationError{Name: "total_commits", err: fmt.Errorf("ent: validator failed for field \"total_commits\": %w", err)}
		}
	}
	return nil
}

func (pru *PullRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pullrequest.Table,
			Columns: pullrequest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pullrequest.FieldID,
			},
		},
	}
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.RepositoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pullrequest.FieldRepositoryID,
		})
	}
	if value, ok := pru.mutation.GithubID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pullrequest.FieldGithubID,
		})
	}
	if value, ok := pru.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pullrequest.FieldTitle,
		})
	}
	if value, ok := pru.mutation.TotalCommits(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pullrequest.FieldTotalCommits,
		})
	}
	if value, ok := pru.mutation.AddedTotalCommits(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pullrequest.FieldTotalCommits,
		})
	}
	if value, ok := pru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pullrequest.FieldCreatedAt,
		})
	}
	if value, ok := pru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pullrequest.FieldUpdatedAt,
		})
	}
	if value, ok := pru.mutation.ClosedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pullrequest.FieldClosedAt,
		})
	}
	if value, ok := pru.mutation.MergedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pullrequest.FieldMergedAt,
		})
	}
	if pru.mutation.CommitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pullrequest.CommitsTable,
			Columns: []string{pullrequest.CommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: commit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.RemovedCommitsIDs(); len(nodes) > 0 && !pru.mutation.CommitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pullrequest.CommitsTable,
			Columns: []string{pullrequest.CommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: commit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.CommitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pullrequest.CommitsTable,
			Columns: []string{pullrequest.CommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: commit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pru.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pullrequest.RepositoryTable,
			Columns: []string{pullrequest.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pullrequest.RepositoryTable,
			Columns: []string{pullrequest.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pullrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PullRequestUpdateOne is the builder for updating a single PullRequest entity.
type PullRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PullRequestMutation
}

// SetRepositoryID sets the "repository_id" field.
func (pruo *PullRequestUpdateOne) SetRepositoryID(s string) *PullRequestUpdateOne {
	pruo.mutation.SetRepositoryID(s)
	return pruo
}

// SetGithubID sets the "github_id" field.
func (pruo *PullRequestUpdateOne) SetGithubID(s string) *PullRequestUpdateOne {
	pruo.mutation.SetGithubID(s)
	return pruo
}

// SetTitle sets the "title" field.
func (pruo *PullRequestUpdateOne) SetTitle(s string) *PullRequestUpdateOne {
	pruo.mutation.SetTitle(s)
	return pruo
}

// SetTotalCommits sets the "total_commits" field.
func (pruo *PullRequestUpdateOne) SetTotalCommits(i int64) *PullRequestUpdateOne {
	pruo.mutation.ResetTotalCommits()
	pruo.mutation.SetTotalCommits(i)
	return pruo
}

// SetNillableTotalCommits sets the "total_commits" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableTotalCommits(i *int64) *PullRequestUpdateOne {
	if i != nil {
		pruo.SetTotalCommits(*i)
	}
	return pruo
}

// AddTotalCommits adds i to the "total_commits" field.
func (pruo *PullRequestUpdateOne) AddTotalCommits(i int64) *PullRequestUpdateOne {
	pruo.mutation.AddTotalCommits(i)
	return pruo
}

// SetCreatedAt sets the "created_at" field.
func (pruo *PullRequestUpdateOne) SetCreatedAt(t time.Time) *PullRequestUpdateOne {
	pruo.mutation.SetCreatedAt(t)
	return pruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableCreatedAt(t *time.Time) *PullRequestUpdateOne {
	if t != nil {
		pruo.SetCreatedAt(*t)
	}
	return pruo
}

// SetUpdatedAt sets the "updated_at" field.
func (pruo *PullRequestUpdateOne) SetUpdatedAt(t time.Time) *PullRequestUpdateOne {
	pruo.mutation.SetUpdatedAt(t)
	return pruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableUpdatedAt(t *time.Time) *PullRequestUpdateOne {
	if t != nil {
		pruo.SetUpdatedAt(*t)
	}
	return pruo
}

// SetClosedAt sets the "closed_at" field.
func (pruo *PullRequestUpdateOne) SetClosedAt(t time.Time) *PullRequestUpdateOne {
	pruo.mutation.SetClosedAt(t)
	return pruo
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableClosedAt(t *time.Time) *PullRequestUpdateOne {
	if t != nil {
		pruo.SetClosedAt(*t)
	}
	return pruo
}

// SetMergedAt sets the "merged_at" field.
func (pruo *PullRequestUpdateOne) SetMergedAt(t time.Time) *PullRequestUpdateOne {
	pruo.mutation.SetMergedAt(t)
	return pruo
}

// SetNillableMergedAt sets the "merged_at" field if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableMergedAt(t *time.Time) *PullRequestUpdateOne {
	if t != nil {
		pruo.SetMergedAt(*t)
	}
	return pruo
}

// AddCommitIDs adds the "commits" edge to the Commit entity by IDs.
func (pruo *PullRequestUpdateOne) AddCommitIDs(ids ...int) *PullRequestUpdateOne {
	pruo.mutation.AddCommitIDs(ids...)
	return pruo
}

// AddCommits adds the "commits" edges to the Commit entity.
func (pruo *PullRequestUpdateOne) AddCommits(c ...*Commit) *PullRequestUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pruo.AddCommitIDs(ids...)
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (pruo *PullRequestUpdateOne) SetRepositoryID(id int) *PullRequestUpdateOne {
	pruo.mutation.SetRepositoryID(id)
	return pruo
}

// SetNillableRepositoryID sets the "repository" edge to the Repository entity by ID if the given value is not nil.
func (pruo *PullRequestUpdateOne) SetNillableRepositoryID(id *int) *PullRequestUpdateOne {
	if id != nil {
		pruo = pruo.SetRepositoryID(*id)
	}
	return pruo
}

// SetRepository sets the "repository" edge to the Repository entity.
func (pruo *PullRequestUpdateOne) SetRepository(r *Repository) *PullRequestUpdateOne {
	return pruo.SetRepositoryID(r.ID)
}

// Mutation returns the PullRequestMutation object of the builder.
func (pruo *PullRequestUpdateOne) Mutation() *PullRequestMutation {
	return pruo.mutation
}

// ClearCommits clears all "commits" edges to the Commit entity.
func (pruo *PullRequestUpdateOne) ClearCommits() *PullRequestUpdateOne {
	pruo.mutation.ClearCommits()
	return pruo
}

// RemoveCommitIDs removes the "commits" edge to Commit entities by IDs.
func (pruo *PullRequestUpdateOne) RemoveCommitIDs(ids ...int) *PullRequestUpdateOne {
	pruo.mutation.RemoveCommitIDs(ids...)
	return pruo
}

// RemoveCommits removes "commits" edges to Commit entities.
func (pruo *PullRequestUpdateOne) RemoveCommits(c ...*Commit) *PullRequestUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pruo.RemoveCommitIDs(ids...)
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (pruo *PullRequestUpdateOne) ClearRepository() *PullRequestUpdateOne {
	pruo.mutation.ClearRepository()
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PullRequestUpdateOne) Select(field string, fields ...string) *PullRequestUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PullRequest entity.
func (pruo *PullRequestUpdateOne) Save(ctx context.Context) (*PullRequest, error) {
	var (
		err  error
		node *PullRequest
	)
	if len(pruo.hooks) == 0 {
		if err = pruo.check(); err != nil {
			return nil, err
		}
		node, err = pruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PullRequestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pruo.check(); err != nil {
				return nil, err
			}
			pruo.mutation = mutation
			node, err = pruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pruo.hooks) - 1; i >= 0; i-- {
			if pruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PullRequestUpdateOne) SaveX(ctx context.Context) *PullRequest {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PullRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PullRequestUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pruo *PullRequestUpdateOne) check() error {
	if v, ok := pruo.mutation.RepositoryID(); ok {
		if err := pullrequest.RepositoryIDValidator(v); err != nil {
			return &ValidationError{Name: "repository_id", err: fmt.Errorf("ent: validator failed for field \"repository_id\": %w", err)}
		}
	}
	if v, ok := pruo.mutation.GithubID(); ok {
		if err := pullrequest.GithubIDValidator(v); err != nil {
			return &ValidationError{Name: "github_id", err: fmt.Errorf("ent: validator failed for field \"github_id\": %w", err)}
		}
	}
	if v, ok := pruo.mutation.Title(); ok {
		if err := pullrequest.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := pruo.mutation.TotalCommits(); ok {
		if err := pullrequest.TotalCommitsValidator(v); err != nil {
			return &ValidationError{Name: "total_commits", err: fmt.Errorf("ent: validator failed for field \"total_commits\": %w", err)}
		}
	}
	return nil
}

func (pruo *PullRequestUpdateOne) sqlSave(ctx context.Context) (_node *PullRequest, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pullrequest.Table,
			Columns: pullrequest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pullrequest.FieldID,
			},
		},
	}
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PullRequest.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pullrequest.FieldID)
		for _, f := range fields {
			if !pullrequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pullrequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.RepositoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pullrequest.FieldRepositoryID,
		})
	}
	if value, ok := pruo.mutation.GithubID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pullrequest.FieldGithubID,
		})
	}
	if value, ok := pruo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pullrequest.FieldTitle,
		})
	}
	if value, ok := pruo.mutation.TotalCommits(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pullrequest.FieldTotalCommits,
		})
	}
	if value, ok := pruo.mutation.AddedTotalCommits(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: pullrequest.FieldTotalCommits,
		})
	}
	if value, ok := pruo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pullrequest.FieldCreatedAt,
		})
	}
	if value, ok := pruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pullrequest.FieldUpdatedAt,
		})
	}
	if value, ok := pruo.mutation.ClosedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pullrequest.FieldClosedAt,
		})
	}
	if value, ok := pruo.mutation.MergedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: pullrequest.FieldMergedAt,
		})
	}
	if pruo.mutation.CommitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pullrequest.CommitsTable,
			Columns: []string{pullrequest.CommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: commit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.RemovedCommitsIDs(); len(nodes) > 0 && !pruo.mutation.CommitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pullrequest.CommitsTable,
			Columns: []string{pullrequest.CommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: commit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.CommitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pullrequest.CommitsTable,
			Columns: []string{pullrequest.CommitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: commit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pruo.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pullrequest.RepositoryTable,
			Columns: []string{pullrequest.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pullrequest.RepositoryTable,
			Columns: []string{pullrequest.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PullRequest{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pullrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
