// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shinnosuke-K/github-dev-insight/ent/commit"
	"github.com/shinnosuke-K/github-dev-insight/ent/pullrequest"
)

// Commit is the model entity for the Commit schema.
type Commit struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PullrequestID holds the value of the "pullrequest_id" field.
	PullrequestID string `json:"pullrequest_id,omitempty"`
	// GithubID holds the value of the "github_id" field.
	GithubID string `json:"github_id,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// CommittedAt holds the value of the "committed_at" field.
	CommittedAt time.Time `json:"committed_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommitQuery when eager-loading is set.
	Edges                CommitEdges `json:"edges"`
	pull_request_commits *int
}

// CommitEdges holds the relations/edges for other nodes in the graph.
type CommitEdges struct {
	// PullRequests holds the value of the pull_requests edge.
	PullRequests *PullRequest `json:"pull_requests,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PullRequestsOrErr returns the PullRequests value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommitEdges) PullRequestsOrErr() (*PullRequest, error) {
	if e.loadedTypes[0] {
		if e.PullRequests == nil {
			// The edge pull_requests was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: pullrequest.Label}
		}
		return e.PullRequests, nil
	}
	return nil, &NotLoadedError{edge: "pull_requests"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Commit) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case commit.FieldID:
			values[i] = new(sql.NullInt64)
		case commit.FieldPullrequestID, commit.FieldGithubID, commit.FieldMessage:
			values[i] = new(sql.NullString)
		case commit.FieldCommittedAt, commit.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case commit.ForeignKeys[0]: // pull_request_commits
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Commit", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Commit fields.
func (c *Commit) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case commit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case commit.FieldPullrequestID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pullrequest_id", values[i])
			} else if value.Valid {
				c.PullrequestID = value.String
			}
		case commit.FieldGithubID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field github_id", values[i])
			} else if value.Valid {
				c.GithubID = value.String
			}
		case commit.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				c.Message = value.String
			}
		case commit.FieldCommittedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field committed_at", values[i])
			} else if value.Valid {
				c.CommittedAt = value.Time
			}
		case commit.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case commit.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field pull_request_commits", value)
			} else if value.Valid {
				c.pull_request_commits = new(int)
				*c.pull_request_commits = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPullRequests queries the "pull_requests" edge of the Commit entity.
func (c *Commit) QueryPullRequests() *PullRequestQuery {
	return (&CommitClient{config: c.config}).QueryPullRequests(c)
}

// Update returns a builder for updating this Commit.
// Note that you need to call Commit.Unwrap() before calling this method if this Commit
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Commit) Update() *CommitUpdateOne {
	return (&CommitClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Commit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Commit) Unwrap() *Commit {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Commit is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Commit) String() string {
	var builder strings.Builder
	builder.WriteString("Commit(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", pullrequest_id=")
	builder.WriteString(c.PullrequestID)
	builder.WriteString(", github_id=")
	builder.WriteString(c.GithubID)
	builder.WriteString(", message=")
	builder.WriteString(c.Message)
	builder.WriteString(", committed_at=")
	builder.WriteString(c.CommittedAt.Format(time.ANSIC))
	builder.WriteString(", created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Commits is a parsable slice of Commit.
type Commits []*Commit

func (c Commits) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
