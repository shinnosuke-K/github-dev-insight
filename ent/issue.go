// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shinnosuke-K/github-dev-insight/ent/issue"
	"github.com/shinnosuke-K/github-dev-insight/ent/repository"
)

// Issue is the model entity for the Issue schema.
type Issue struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// GithubID holds the value of the "github_id" field.
	GithubID string `json:"github_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// LastEditedAt holds the value of the "last_edited_at" field.
	LastEditedAt time.Time `json:"last_edited_at,omitempty"`
	// ClosedAt holds the value of the "closed_at" field.
	ClosedAt time.Time `json:"closed_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IssueQuery when eager-loading is set.
	Edges         IssueEdges `json:"edges"`
	repository_id *uuid.UUID
}

// IssueEdges holds the relations/edges for other nodes in the graph.
type IssueEdges struct {
	// Repository holds the value of the repository edge.
	Repository *Repository `json:"repository,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RepositoryOrErr returns the Repository value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IssueEdges) RepositoryOrErr() (*Repository, error) {
	if e.loadedTypes[0] {
		if e.Repository == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: repository.Label}
		}
		return e.Repository, nil
	}
	return nil, &NotLoadedError{edge: "repository"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Issue) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case issue.FieldGithubID, issue.FieldTitle:
			values[i] = new(sql.NullString)
		case issue.FieldCreatedAt, issue.FieldUpdatedAt, issue.FieldLastEditedAt, issue.FieldClosedAt:
			values[i] = new(sql.NullTime)
		case issue.FieldID:
			values[i] = new(uuid.UUID)
		case issue.ForeignKeys[0]: // repository_id
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Issue", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Issue fields.
func (i *Issue) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case issue.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case issue.FieldGithubID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field github_id", values[j])
			} else if value.Valid {
				i.GithubID = value.String
			}
		case issue.FieldTitle:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[j])
			} else if value.Valid {
				i.Title = value.String
			}
		case issue.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case issue.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case issue.FieldLastEditedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_edited_at", values[j])
			} else if value.Valid {
				i.LastEditedAt = value.Time
			}
		case issue.FieldClosedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field closed_at", values[j])
			} else if value.Valid {
				i.ClosedAt = value.Time
			}
		case issue.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field repository_id", values[j])
			} else if value.Valid {
				i.repository_id = new(uuid.UUID)
				*i.repository_id = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryRepository queries the "repository" edge of the Issue entity.
func (i *Issue) QueryRepository() *RepositoryQuery {
	return NewIssueClient(i.config).QueryRepository(i)
}

// Update returns a builder for updating this Issue.
// Note that you need to call Issue.Unwrap() before calling this method if this Issue
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Issue) Update() *IssueUpdateOne {
	return NewIssueClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Issue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Issue) Unwrap() *Issue {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Issue is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Issue) String() string {
	var builder strings.Builder
	builder.WriteString("Issue(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("github_id=")
	builder.WriteString(i.GithubID)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(i.Title)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_edited_at=")
	builder.WriteString(i.LastEditedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("closed_at=")
	builder.WriteString(i.ClosedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Issues is a parsable slice of Issue.
type Issues []*Issue
