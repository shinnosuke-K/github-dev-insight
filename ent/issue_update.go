// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shinnosuke-K/github-dev-insight/ent/issue"
	"github.com/shinnosuke-K/github-dev-insight/ent/predicate"
	"github.com/shinnosuke-K/github-dev-insight/ent/repository"
)

// IssueUpdate is the builder for updating Issue entities.
type IssueUpdate struct {
	config
	hooks    []Hook
	mutation *IssueMutation
}

// Where appends a list predicates to the IssueUpdate builder.
func (iu *IssueUpdate) Where(ps ...predicate.Issue) *IssueUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetGithubID sets the "github_id" field.
func (iu *IssueUpdate) SetGithubID(s string) *IssueUpdate {
	iu.mutation.SetGithubID(s)
	return iu
}

// SetTitle sets the "title" field.
func (iu *IssueUpdate) SetTitle(s string) *IssueUpdate {
	iu.mutation.SetTitle(s)
	return iu
}

// SetCreatedAt sets the "created_at" field.
func (iu *IssueUpdate) SetCreatedAt(t time.Time) *IssueUpdate {
	iu.mutation.SetCreatedAt(t)
	return iu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableCreatedAt(t *time.Time) *IssueUpdate {
	if t != nil {
		iu.SetCreatedAt(*t)
	}
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *IssueUpdate) SetUpdatedAt(t time.Time) *IssueUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableUpdatedAt(t *time.Time) *IssueUpdate {
	if t != nil {
		iu.SetUpdatedAt(*t)
	}
	return iu
}

// SetLastEditedAt sets the "last_edited_at" field.
func (iu *IssueUpdate) SetLastEditedAt(t time.Time) *IssueUpdate {
	iu.mutation.SetLastEditedAt(t)
	return iu
}

// SetNillableLastEditedAt sets the "last_edited_at" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableLastEditedAt(t *time.Time) *IssueUpdate {
	if t != nil {
		iu.SetLastEditedAt(*t)
	}
	return iu
}

// ClearLastEditedAt clears the value of the "last_edited_at" field.
func (iu *IssueUpdate) ClearLastEditedAt() *IssueUpdate {
	iu.mutation.ClearLastEditedAt()
	return iu
}

// SetClosedAt sets the "closed_at" field.
func (iu *IssueUpdate) SetClosedAt(t time.Time) *IssueUpdate {
	iu.mutation.SetClosedAt(t)
	return iu
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (iu *IssueUpdate) SetNillableClosedAt(t *time.Time) *IssueUpdate {
	if t != nil {
		iu.SetClosedAt(*t)
	}
	return iu
}

// ClearClosedAt clears the value of the "closed_at" field.
func (iu *IssueUpdate) ClearClosedAt() *IssueUpdate {
	iu.mutation.ClearClosedAt()
	return iu
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (iu *IssueUpdate) SetRepositoryID(id uuid.UUID) *IssueUpdate {
	iu.mutation.SetRepositoryID(id)
	return iu
}

// SetNillableRepositoryID sets the "repository" edge to the Repository entity by ID if the given value is not nil.
func (iu *IssueUpdate) SetNillableRepositoryID(id *uuid.UUID) *IssueUpdate {
	if id != nil {
		iu = iu.SetRepositoryID(*id)
	}
	return iu
}

// SetRepository sets the "repository" edge to the Repository entity.
func (iu *IssueUpdate) SetRepository(r *Repository) *IssueUpdate {
	return iu.SetRepositoryID(r.ID)
}

// Mutation returns the IssueMutation object of the builder.
func (iu *IssueUpdate) Mutation() *IssueMutation {
	return iu.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (iu *IssueUpdate) ClearRepository() *IssueUpdate {
	iu.mutation.ClearRepository()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IssueUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, IssueMutation](ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IssueUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IssueUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IssueUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *IssueUpdate) check() error {
	if v, ok := iu.mutation.GithubID(); ok {
		if err := issue.GithubIDValidator(v); err != nil {
			return &ValidationError{Name: "github_id", err: fmt.Errorf(`ent: validator failed for field "Issue.github_id": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Title(); ok {
		if err := issue.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Issue.title": %w`, err)}
		}
	}
	return nil
}

func (iu *IssueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(issue.Table, issue.Columns, sqlgraph.NewFieldSpec(issue.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.GithubID(); ok {
		_spec.SetField(issue.FieldGithubID, field.TypeString, value)
	}
	if value, ok := iu.mutation.Title(); ok {
		_spec.SetField(issue.FieldTitle, field.TypeString, value)
	}
	if value, ok := iu.mutation.CreatedAt(); ok {
		_spec.SetField(issue.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(issue.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.LastEditedAt(); ok {
		_spec.SetField(issue.FieldLastEditedAt, field.TypeTime, value)
	}
	if iu.mutation.LastEditedAtCleared() {
		_spec.ClearField(issue.FieldLastEditedAt, field.TypeTime)
	}
	if value, ok := iu.mutation.ClosedAt(); ok {
		_spec.SetField(issue.FieldClosedAt, field.TypeTime, value)
	}
	if iu.mutation.ClosedAtCleared() {
		_spec.ClearField(issue.FieldClosedAt, field.TypeTime)
	}
	if iu.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.RepositoryTable,
			Columns: []string{issue.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.RepositoryTable,
			Columns: []string{issue.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{issue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IssueUpdateOne is the builder for updating a single Issue entity.
type IssueUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IssueMutation
}

// SetGithubID sets the "github_id" field.
func (iuo *IssueUpdateOne) SetGithubID(s string) *IssueUpdateOne {
	iuo.mutation.SetGithubID(s)
	return iuo
}

// SetTitle sets the "title" field.
func (iuo *IssueUpdateOne) SetTitle(s string) *IssueUpdateOne {
	iuo.mutation.SetTitle(s)
	return iuo
}

// SetCreatedAt sets the "created_at" field.
func (iuo *IssueUpdateOne) SetCreatedAt(t time.Time) *IssueUpdateOne {
	iuo.mutation.SetCreatedAt(t)
	return iuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableCreatedAt(t *time.Time) *IssueUpdateOne {
	if t != nil {
		iuo.SetCreatedAt(*t)
	}
	return iuo
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *IssueUpdateOne) SetUpdatedAt(t time.Time) *IssueUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableUpdatedAt(t *time.Time) *IssueUpdateOne {
	if t != nil {
		iuo.SetUpdatedAt(*t)
	}
	return iuo
}

// SetLastEditedAt sets the "last_edited_at" field.
func (iuo *IssueUpdateOne) SetLastEditedAt(t time.Time) *IssueUpdateOne {
	iuo.mutation.SetLastEditedAt(t)
	return iuo
}

// SetNillableLastEditedAt sets the "last_edited_at" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableLastEditedAt(t *time.Time) *IssueUpdateOne {
	if t != nil {
		iuo.SetLastEditedAt(*t)
	}
	return iuo
}

// ClearLastEditedAt clears the value of the "last_edited_at" field.
func (iuo *IssueUpdateOne) ClearLastEditedAt() *IssueUpdateOne {
	iuo.mutation.ClearLastEditedAt()
	return iuo
}

// SetClosedAt sets the "closed_at" field.
func (iuo *IssueUpdateOne) SetClosedAt(t time.Time) *IssueUpdateOne {
	iuo.mutation.SetClosedAt(t)
	return iuo
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableClosedAt(t *time.Time) *IssueUpdateOne {
	if t != nil {
		iuo.SetClosedAt(*t)
	}
	return iuo
}

// ClearClosedAt clears the value of the "closed_at" field.
func (iuo *IssueUpdateOne) ClearClosedAt() *IssueUpdateOne {
	iuo.mutation.ClearClosedAt()
	return iuo
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (iuo *IssueUpdateOne) SetRepositoryID(id uuid.UUID) *IssueUpdateOne {
	iuo.mutation.SetRepositoryID(id)
	return iuo
}

// SetNillableRepositoryID sets the "repository" edge to the Repository entity by ID if the given value is not nil.
func (iuo *IssueUpdateOne) SetNillableRepositoryID(id *uuid.UUID) *IssueUpdateOne {
	if id != nil {
		iuo = iuo.SetRepositoryID(*id)
	}
	return iuo
}

// SetRepository sets the "repository" edge to the Repository entity.
func (iuo *IssueUpdateOne) SetRepository(r *Repository) *IssueUpdateOne {
	return iuo.SetRepositoryID(r.ID)
}

// Mutation returns the IssueMutation object of the builder.
func (iuo *IssueUpdateOne) Mutation() *IssueMutation {
	return iuo.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (iuo *IssueUpdateOne) ClearRepository() *IssueUpdateOne {
	iuo.mutation.ClearRepository()
	return iuo
}

// Where appends a list predicates to the IssueUpdate builder.
func (iuo *IssueUpdateOne) Where(ps ...predicate.Issue) *IssueUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IssueUpdateOne) Select(field string, fields ...string) *IssueUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Issue entity.
func (iuo *IssueUpdateOne) Save(ctx context.Context) (*Issue, error) {
	return withHooks[*Issue, IssueMutation](ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IssueUpdateOne) SaveX(ctx context.Context) *Issue {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IssueUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IssueUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *IssueUpdateOne) check() error {
	if v, ok := iuo.mutation.GithubID(); ok {
		if err := issue.GithubIDValidator(v); err != nil {
			return &ValidationError{Name: "github_id", err: fmt.Errorf(`ent: validator failed for field "Issue.github_id": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Title(); ok {
		if err := issue.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Issue.title": %w`, err)}
		}
	}
	return nil
}

func (iuo *IssueUpdateOne) sqlSave(ctx context.Context) (_node *Issue, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(issue.Table, issue.Columns, sqlgraph.NewFieldSpec(issue.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Issue.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, issue.FieldID)
		for _, f := range fields {
			if !issue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != issue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.GithubID(); ok {
		_spec.SetField(issue.FieldGithubID, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Title(); ok {
		_spec.SetField(issue.FieldTitle, field.TypeString, value)
	}
	if value, ok := iuo.mutation.CreatedAt(); ok {
		_spec.SetField(issue.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(issue.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.LastEditedAt(); ok {
		_spec.SetField(issue.FieldLastEditedAt, field.TypeTime, value)
	}
	if iuo.mutation.LastEditedAtCleared() {
		_spec.ClearField(issue.FieldLastEditedAt, field.TypeTime)
	}
	if value, ok := iuo.mutation.ClosedAt(); ok {
		_spec.SetField(issue.FieldClosedAt, field.TypeTime, value)
	}
	if iuo.mutation.ClosedAtCleared() {
		_spec.ClearField(issue.FieldClosedAt, field.TypeTime)
	}
	if iuo.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.RepositoryTable,
			Columns: []string{issue.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   issue.RepositoryTable,
			Columns: []string{issue.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Issue{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{issue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
