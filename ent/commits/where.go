// Code generated by ent, DO NOT EDIT.

package commits

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/shinnosuke-K/github-dev-insight/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Commits {
	return predicate.Commits(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Commits {
	return predicate.Commits(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Commits {
	return predicate.Commits(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Commits {
	return predicate.Commits(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Commits {
	return predicate.Commits(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Commits {
	return predicate.Commits(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Commits {
	return predicate.Commits(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Commits {
	return predicate.Commits(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Commits {
	return predicate.Commits(sql.FieldLTE(FieldID, id))
}

// GithubID applies equality check predicate on the "github_id" field. It's identical to GithubIDEQ.
func GithubID(v string) predicate.Commits {
	return predicate.Commits(sql.FieldEQ(FieldGithubID, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.Commits {
	return predicate.Commits(sql.FieldEQ(FieldMessage, v))
}

// Additions applies equality check predicate on the "additions" field. It's identical to AdditionsEQ.
func Additions(v int64) predicate.Commits {
	return predicate.Commits(sql.FieldEQ(FieldAdditions, v))
}

// Deletions applies equality check predicate on the "deletions" field. It's identical to DeletionsEQ.
func Deletions(v int64) predicate.Commits {
	return predicate.Commits(sql.FieldEQ(FieldDeletions, v))
}

// ChangeFiles applies equality check predicate on the "change_files" field. It's identical to ChangeFilesEQ.
func ChangeFiles(v int64) predicate.Commits {
	return predicate.Commits(sql.FieldEQ(FieldChangeFiles, v))
}

// CommittedAt applies equality check predicate on the "committed_at" field. It's identical to CommittedAtEQ.
func CommittedAt(v time.Time) predicate.Commits {
	return predicate.Commits(sql.FieldEQ(FieldCommittedAt, v))
}

// PushedAt applies equality check predicate on the "pushed_at" field. It's identical to PushedAtEQ.
func PushedAt(v time.Time) predicate.Commits {
	return predicate.Commits(sql.FieldEQ(FieldPushedAt, v))
}

// GithubIDEQ applies the EQ predicate on the "github_id" field.
func GithubIDEQ(v string) predicate.Commits {
	return predicate.Commits(sql.FieldEQ(FieldGithubID, v))
}

// GithubIDNEQ applies the NEQ predicate on the "github_id" field.
func GithubIDNEQ(v string) predicate.Commits {
	return predicate.Commits(sql.FieldNEQ(FieldGithubID, v))
}

// GithubIDIn applies the In predicate on the "github_id" field.
func GithubIDIn(vs ...string) predicate.Commits {
	return predicate.Commits(sql.FieldIn(FieldGithubID, vs...))
}

// GithubIDNotIn applies the NotIn predicate on the "github_id" field.
func GithubIDNotIn(vs ...string) predicate.Commits {
	return predicate.Commits(sql.FieldNotIn(FieldGithubID, vs...))
}

// GithubIDGT applies the GT predicate on the "github_id" field.
func GithubIDGT(v string) predicate.Commits {
	return predicate.Commits(sql.FieldGT(FieldGithubID, v))
}

// GithubIDGTE applies the GTE predicate on the "github_id" field.
func GithubIDGTE(v string) predicate.Commits {
	return predicate.Commits(sql.FieldGTE(FieldGithubID, v))
}

// GithubIDLT applies the LT predicate on the "github_id" field.
func GithubIDLT(v string) predicate.Commits {
	return predicate.Commits(sql.FieldLT(FieldGithubID, v))
}

// GithubIDLTE applies the LTE predicate on the "github_id" field.
func GithubIDLTE(v string) predicate.Commits {
	return predicate.Commits(sql.FieldLTE(FieldGithubID, v))
}

// GithubIDContains applies the Contains predicate on the "github_id" field.
func GithubIDContains(v string) predicate.Commits {
	return predicate.Commits(sql.FieldContains(FieldGithubID, v))
}

// GithubIDHasPrefix applies the HasPrefix predicate on the "github_id" field.
func GithubIDHasPrefix(v string) predicate.Commits {
	return predicate.Commits(sql.FieldHasPrefix(FieldGithubID, v))
}

// GithubIDHasSuffix applies the HasSuffix predicate on the "github_id" field.
func GithubIDHasSuffix(v string) predicate.Commits {
	return predicate.Commits(sql.FieldHasSuffix(FieldGithubID, v))
}

// GithubIDEqualFold applies the EqualFold predicate on the "github_id" field.
func GithubIDEqualFold(v string) predicate.Commits {
	return predicate.Commits(sql.FieldEqualFold(FieldGithubID, v))
}

// GithubIDContainsFold applies the ContainsFold predicate on the "github_id" field.
func GithubIDContainsFold(v string) predicate.Commits {
	return predicate.Commits(sql.FieldContainsFold(FieldGithubID, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.Commits {
	return predicate.Commits(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.Commits {
	return predicate.Commits(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.Commits {
	return predicate.Commits(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.Commits {
	return predicate.Commits(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.Commits {
	return predicate.Commits(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.Commits {
	return predicate.Commits(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.Commits {
	return predicate.Commits(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.Commits {
	return predicate.Commits(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.Commits {
	return predicate.Commits(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.Commits {
	return predicate.Commits(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.Commits {
	return predicate.Commits(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.Commits {
	return predicate.Commits(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.Commits {
	return predicate.Commits(sql.FieldContainsFold(FieldMessage, v))
}

// AdditionsEQ applies the EQ predicate on the "additions" field.
func AdditionsEQ(v int64) predicate.Commits {
	return predicate.Commits(sql.FieldEQ(FieldAdditions, v))
}

// AdditionsNEQ applies the NEQ predicate on the "additions" field.
func AdditionsNEQ(v int64) predicate.Commits {
	return predicate.Commits(sql.FieldNEQ(FieldAdditions, v))
}

// AdditionsIn applies the In predicate on the "additions" field.
func AdditionsIn(vs ...int64) predicate.Commits {
	return predicate.Commits(sql.FieldIn(FieldAdditions, vs...))
}

// AdditionsNotIn applies the NotIn predicate on the "additions" field.
func AdditionsNotIn(vs ...int64) predicate.Commits {
	return predicate.Commits(sql.FieldNotIn(FieldAdditions, vs...))
}

// AdditionsGT applies the GT predicate on the "additions" field.
func AdditionsGT(v int64) predicate.Commits {
	return predicate.Commits(sql.FieldGT(FieldAdditions, v))
}

// AdditionsGTE applies the GTE predicate on the "additions" field.
func AdditionsGTE(v int64) predicate.Commits {
	return predicate.Commits(sql.FieldGTE(FieldAdditions, v))
}

// AdditionsLT applies the LT predicate on the "additions" field.
func AdditionsLT(v int64) predicate.Commits {
	return predicate.Commits(sql.FieldLT(FieldAdditions, v))
}

// AdditionsLTE applies the LTE predicate on the "additions" field.
func AdditionsLTE(v int64) predicate.Commits {
	return predicate.Commits(sql.FieldLTE(FieldAdditions, v))
}

// DeletionsEQ applies the EQ predicate on the "deletions" field.
func DeletionsEQ(v int64) predicate.Commits {
	return predicate.Commits(sql.FieldEQ(FieldDeletions, v))
}

// DeletionsNEQ applies the NEQ predicate on the "deletions" field.
func DeletionsNEQ(v int64) predicate.Commits {
	return predicate.Commits(sql.FieldNEQ(FieldDeletions, v))
}

// DeletionsIn applies the In predicate on the "deletions" field.
func DeletionsIn(vs ...int64) predicate.Commits {
	return predicate.Commits(sql.FieldIn(FieldDeletions, vs...))
}

// DeletionsNotIn applies the NotIn predicate on the "deletions" field.
func DeletionsNotIn(vs ...int64) predicate.Commits {
	return predicate.Commits(sql.FieldNotIn(FieldDeletions, vs...))
}

// DeletionsGT applies the GT predicate on the "deletions" field.
func DeletionsGT(v int64) predicate.Commits {
	return predicate.Commits(sql.FieldGT(FieldDeletions, v))
}

// DeletionsGTE applies the GTE predicate on the "deletions" field.
func DeletionsGTE(v int64) predicate.Commits {
	return predicate.Commits(sql.FieldGTE(FieldDeletions, v))
}

// DeletionsLT applies the LT predicate on the "deletions" field.
func DeletionsLT(v int64) predicate.Commits {
	return predicate.Commits(sql.FieldLT(FieldDeletions, v))
}

// DeletionsLTE applies the LTE predicate on the "deletions" field.
func DeletionsLTE(v int64) predicate.Commits {
	return predicate.Commits(sql.FieldLTE(FieldDeletions, v))
}

// ChangeFilesEQ applies the EQ predicate on the "change_files" field.
func ChangeFilesEQ(v int64) predicate.Commits {
	return predicate.Commits(sql.FieldEQ(FieldChangeFiles, v))
}

// ChangeFilesNEQ applies the NEQ predicate on the "change_files" field.
func ChangeFilesNEQ(v int64) predicate.Commits {
	return predicate.Commits(sql.FieldNEQ(FieldChangeFiles, v))
}

// ChangeFilesIn applies the In predicate on the "change_files" field.
func ChangeFilesIn(vs ...int64) predicate.Commits {
	return predicate.Commits(sql.FieldIn(FieldChangeFiles, vs...))
}

// ChangeFilesNotIn applies the NotIn predicate on the "change_files" field.
func ChangeFilesNotIn(vs ...int64) predicate.Commits {
	return predicate.Commits(sql.FieldNotIn(FieldChangeFiles, vs...))
}

// ChangeFilesGT applies the GT predicate on the "change_files" field.
func ChangeFilesGT(v int64) predicate.Commits {
	return predicate.Commits(sql.FieldGT(FieldChangeFiles, v))
}

// ChangeFilesGTE applies the GTE predicate on the "change_files" field.
func ChangeFilesGTE(v int64) predicate.Commits {
	return predicate.Commits(sql.FieldGTE(FieldChangeFiles, v))
}

// ChangeFilesLT applies the LT predicate on the "change_files" field.
func ChangeFilesLT(v int64) predicate.Commits {
	return predicate.Commits(sql.FieldLT(FieldChangeFiles, v))
}

// ChangeFilesLTE applies the LTE predicate on the "change_files" field.
func ChangeFilesLTE(v int64) predicate.Commits {
	return predicate.Commits(sql.FieldLTE(FieldChangeFiles, v))
}

// CommittedAtEQ applies the EQ predicate on the "committed_at" field.
func CommittedAtEQ(v time.Time) predicate.Commits {
	return predicate.Commits(sql.FieldEQ(FieldCommittedAt, v))
}

// CommittedAtNEQ applies the NEQ predicate on the "committed_at" field.
func CommittedAtNEQ(v time.Time) predicate.Commits {
	return predicate.Commits(sql.FieldNEQ(FieldCommittedAt, v))
}

// CommittedAtIn applies the In predicate on the "committed_at" field.
func CommittedAtIn(vs ...time.Time) predicate.Commits {
	return predicate.Commits(sql.FieldIn(FieldCommittedAt, vs...))
}

// CommittedAtNotIn applies the NotIn predicate on the "committed_at" field.
func CommittedAtNotIn(vs ...time.Time) predicate.Commits {
	return predicate.Commits(sql.FieldNotIn(FieldCommittedAt, vs...))
}

// CommittedAtGT applies the GT predicate on the "committed_at" field.
func CommittedAtGT(v time.Time) predicate.Commits {
	return predicate.Commits(sql.FieldGT(FieldCommittedAt, v))
}

// CommittedAtGTE applies the GTE predicate on the "committed_at" field.
func CommittedAtGTE(v time.Time) predicate.Commits {
	return predicate.Commits(sql.FieldGTE(FieldCommittedAt, v))
}

// CommittedAtLT applies the LT predicate on the "committed_at" field.
func CommittedAtLT(v time.Time) predicate.Commits {
	return predicate.Commits(sql.FieldLT(FieldCommittedAt, v))
}

// CommittedAtLTE applies the LTE predicate on the "committed_at" field.
func CommittedAtLTE(v time.Time) predicate.Commits {
	return predicate.Commits(sql.FieldLTE(FieldCommittedAt, v))
}

// PushedAtEQ applies the EQ predicate on the "pushed_at" field.
func PushedAtEQ(v time.Time) predicate.Commits {
	return predicate.Commits(sql.FieldEQ(FieldPushedAt, v))
}

// PushedAtNEQ applies the NEQ predicate on the "pushed_at" field.
func PushedAtNEQ(v time.Time) predicate.Commits {
	return predicate.Commits(sql.FieldNEQ(FieldPushedAt, v))
}

// PushedAtIn applies the In predicate on the "pushed_at" field.
func PushedAtIn(vs ...time.Time) predicate.Commits {
	return predicate.Commits(sql.FieldIn(FieldPushedAt, vs...))
}

// PushedAtNotIn applies the NotIn predicate on the "pushed_at" field.
func PushedAtNotIn(vs ...time.Time) predicate.Commits {
	return predicate.Commits(sql.FieldNotIn(FieldPushedAt, vs...))
}

// PushedAtGT applies the GT predicate on the "pushed_at" field.
func PushedAtGT(v time.Time) predicate.Commits {
	return predicate.Commits(sql.FieldGT(FieldPushedAt, v))
}

// PushedAtGTE applies the GTE predicate on the "pushed_at" field.
func PushedAtGTE(v time.Time) predicate.Commits {
	return predicate.Commits(sql.FieldGTE(FieldPushedAt, v))
}

// PushedAtLT applies the LT predicate on the "pushed_at" field.
func PushedAtLT(v time.Time) predicate.Commits {
	return predicate.Commits(sql.FieldLT(FieldPushedAt, v))
}

// PushedAtLTE applies the LTE predicate on the "pushed_at" field.
func PushedAtLTE(v time.Time) predicate.Commits {
	return predicate.Commits(sql.FieldLTE(FieldPushedAt, v))
}

// PushedAtIsNil applies the IsNil predicate on the "pushed_at" field.
func PushedAtIsNil() predicate.Commits {
	return predicate.Commits(sql.FieldIsNull(FieldPushedAt))
}

// PushedAtNotNil applies the NotNil predicate on the "pushed_at" field.
func PushedAtNotNil() predicate.Commits {
	return predicate.Commits(sql.FieldNotNull(FieldPushedAt))
}

// HasPullRequest applies the HasEdge predicate on the "pull_request" edge.
func HasPullRequest() predicate.Commits {
	return predicate.Commits(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PullRequestTable, PullRequestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPullRequestWith applies the HasEdge predicate on the "pull_request" edge with a given conditions (other predicates).
func HasPullRequestWith(preds ...predicate.PullRequest) predicate.Commits {
	return predicate.Commits(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PullRequestInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PullRequestTable, PullRequestColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Commits) predicate.Commits {
	return predicate.Commits(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Commits) predicate.Commits {
	return predicate.Commits(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Commits) predicate.Commits {
	return predicate.Commits(func(s *sql.Selector) {
		p(s.Not())
	})
}
