// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shinnosuke-K/github-dev-insight/ent/commits"
	"github.com/shinnosuke-K/github-dev-insight/ent/pullrequest"
)

// Commits is the model entity for the Commits schema.
type Commits struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// GithubID holds the value of the "github_id" field.
	GithubID string `json:"github_id,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// CommittedAt holds the value of the "committed_at" field.
	CommittedAt time.Time `json:"committed_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommitsQuery when eager-loading is set.
	Edges           CommitsEdges `json:"edges"`
	pull_request_id *uuid.UUID
}

// CommitsEdges holds the relations/edges for other nodes in the graph.
type CommitsEdges struct {
	// PullRequest holds the value of the pull_request edge.
	PullRequest *PullRequest `json:"pull_request,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PullRequestOrErr returns the PullRequest value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommitsEdges) PullRequestOrErr() (*PullRequest, error) {
	if e.loadedTypes[0] {
		if e.PullRequest == nil {
			// The edge pull_request was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: pullrequest.Label}
		}
		return e.PullRequest, nil
	}
	return nil, &NotLoadedError{edge: "pull_request"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Commits) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case commits.FieldGithubID, commits.FieldMessage:
			values[i] = new(sql.NullString)
		case commits.FieldCommittedAt, commits.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case commits.FieldID:
			values[i] = new(uuid.UUID)
		case commits.ForeignKeys[0]: // pull_request_id
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Commits", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Commits fields.
func (c *Commits) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case commits.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case commits.FieldGithubID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field github_id", values[i])
			} else if value.Valid {
				c.GithubID = value.String
			}
		case commits.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				c.Message = value.String
			}
		case commits.FieldCommittedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field committed_at", values[i])
			} else if value.Valid {
				c.CommittedAt = value.Time
			}
		case commits.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case commits.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field pull_request_id", values[i])
			} else if value.Valid {
				c.pull_request_id = new(uuid.UUID)
				*c.pull_request_id = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryPullRequest queries the "pull_request" edge of the Commits entity.
func (c *Commits) QueryPullRequest() *PullRequestQuery {
	return (&CommitsClient{config: c.config}).QueryPullRequest(c)
}

// Update returns a builder for updating this Commits.
// Note that you need to call Commits.Unwrap() before calling this method if this Commits
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Commits) Update() *CommitsUpdateOne {
	return (&CommitsClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Commits entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Commits) Unwrap() *Commits {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Commits is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Commits) String() string {
	var builder strings.Builder
	builder.WriteString("Commits(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", github_id=")
	builder.WriteString(c.GithubID)
	builder.WriteString(", message=")
	builder.WriteString(c.Message)
	builder.WriteString(", committed_at=")
	builder.WriteString(c.CommittedAt.Format(time.ANSIC))
	builder.WriteString(", created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CommitsSlice is a parsable slice of Commits.
type CommitsSlice []*Commits

func (c CommitsSlice) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
