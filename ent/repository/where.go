// Code generated by ent, DO NOT EDIT.

package repository

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/shinnosuke-K/github-dev-insight/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldID, id))
}

// GithubID applies equality check predicate on the "github_id" field. It's identical to GithubIDEQ.
func GithubID(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldGithubID, v))
}

// Owner applies equality check predicate on the "owner" field. It's identical to OwnerEQ.
func Owner(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldOwner, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldDescription, v))
}

// TotalPr applies equality check predicate on the "total_pr" field. It's identical to TotalPrEQ.
func TotalPr(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldTotalPr, v))
}

// TotalIssue applies equality check predicate on the "total_issue" field. It's identical to TotalIssueEQ.
func TotalIssue(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldTotalIssue, v))
}

// GetPullRequest applies equality check predicate on the "get_pull_request" field. It's identical to GetPullRequestEQ.
func GetPullRequest(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldGetPullRequest, v))
}

// GetIssue applies equality check predicate on the "get_issue" field. It's identical to GetIssueEQ.
func GetIssue(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldGetIssue, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldUpdatedAt, v))
}

// PushedAt applies equality check predicate on the "pushed_at" field. It's identical to PushedAtEQ.
func PushedAt(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldPushedAt, v))
}

// GithubIDEQ applies the EQ predicate on the "github_id" field.
func GithubIDEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldGithubID, v))
}

// GithubIDNEQ applies the NEQ predicate on the "github_id" field.
func GithubIDNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldGithubID, v))
}

// GithubIDIn applies the In predicate on the "github_id" field.
func GithubIDIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldGithubID, vs...))
}

// GithubIDNotIn applies the NotIn predicate on the "github_id" field.
func GithubIDNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldGithubID, vs...))
}

// GithubIDGT applies the GT predicate on the "github_id" field.
func GithubIDGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldGithubID, v))
}

// GithubIDGTE applies the GTE predicate on the "github_id" field.
func GithubIDGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldGithubID, v))
}

// GithubIDLT applies the LT predicate on the "github_id" field.
func GithubIDLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldGithubID, v))
}

// GithubIDLTE applies the LTE predicate on the "github_id" field.
func GithubIDLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldGithubID, v))
}

// GithubIDContains applies the Contains predicate on the "github_id" field.
func GithubIDContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldGithubID, v))
}

// GithubIDHasPrefix applies the HasPrefix predicate on the "github_id" field.
func GithubIDHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldGithubID, v))
}

// GithubIDHasSuffix applies the HasSuffix predicate on the "github_id" field.
func GithubIDHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldGithubID, v))
}

// GithubIDEqualFold applies the EqualFold predicate on the "github_id" field.
func GithubIDEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldGithubID, v))
}

// GithubIDContainsFold applies the ContainsFold predicate on the "github_id" field.
func GithubIDContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldGithubID, v))
}

// OwnerEQ applies the EQ predicate on the "owner" field.
func OwnerEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldOwner, v))
}

// OwnerNEQ applies the NEQ predicate on the "owner" field.
func OwnerNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldOwner, v))
}

// OwnerIn applies the In predicate on the "owner" field.
func OwnerIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldOwner, vs...))
}

// OwnerNotIn applies the NotIn predicate on the "owner" field.
func OwnerNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldOwner, vs...))
}

// OwnerGT applies the GT predicate on the "owner" field.
func OwnerGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldOwner, v))
}

// OwnerGTE applies the GTE predicate on the "owner" field.
func OwnerGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldOwner, v))
}

// OwnerLT applies the LT predicate on the "owner" field.
func OwnerLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldOwner, v))
}

// OwnerLTE applies the LTE predicate on the "owner" field.
func OwnerLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldOwner, v))
}

// OwnerContains applies the Contains predicate on the "owner" field.
func OwnerContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldOwner, v))
}

// OwnerHasPrefix applies the HasPrefix predicate on the "owner" field.
func OwnerHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldOwner, v))
}

// OwnerHasSuffix applies the HasSuffix predicate on the "owner" field.
func OwnerHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldOwner, v))
}

// OwnerEqualFold applies the EqualFold predicate on the "owner" field.
func OwnerEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldOwner, v))
}

// OwnerContainsFold applies the ContainsFold predicate on the "owner" field.
func OwnerContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldOwner, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Repository {
	return predicate.Repository(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Repository {
	return predicate.Repository(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Repository {
	return predicate.Repository(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Repository {
	return predicate.Repository(sql.FieldContainsFold(FieldDescription, v))
}

// TotalPrEQ applies the EQ predicate on the "total_pr" field.
func TotalPrEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldTotalPr, v))
}

// TotalPrNEQ applies the NEQ predicate on the "total_pr" field.
func TotalPrNEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldTotalPr, v))
}

// TotalPrIn applies the In predicate on the "total_pr" field.
func TotalPrIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldTotalPr, vs...))
}

// TotalPrNotIn applies the NotIn predicate on the "total_pr" field.
func TotalPrNotIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldTotalPr, vs...))
}

// TotalPrGT applies the GT predicate on the "total_pr" field.
func TotalPrGT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldTotalPr, v))
}

// TotalPrGTE applies the GTE predicate on the "total_pr" field.
func TotalPrGTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldTotalPr, v))
}

// TotalPrLT applies the LT predicate on the "total_pr" field.
func TotalPrLT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldTotalPr, v))
}

// TotalPrLTE applies the LTE predicate on the "total_pr" field.
func TotalPrLTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldTotalPr, v))
}

// TotalIssueEQ applies the EQ predicate on the "total_issue" field.
func TotalIssueEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldTotalIssue, v))
}

// TotalIssueNEQ applies the NEQ predicate on the "total_issue" field.
func TotalIssueNEQ(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldTotalIssue, v))
}

// TotalIssueIn applies the In predicate on the "total_issue" field.
func TotalIssueIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldTotalIssue, vs...))
}

// TotalIssueNotIn applies the NotIn predicate on the "total_issue" field.
func TotalIssueNotIn(vs ...int64) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldTotalIssue, vs...))
}

// TotalIssueGT applies the GT predicate on the "total_issue" field.
func TotalIssueGT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldTotalIssue, v))
}

// TotalIssueGTE applies the GTE predicate on the "total_issue" field.
func TotalIssueGTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldTotalIssue, v))
}

// TotalIssueLT applies the LT predicate on the "total_issue" field.
func TotalIssueLT(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldTotalIssue, v))
}

// TotalIssueLTE applies the LTE predicate on the "total_issue" field.
func TotalIssueLTE(v int64) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldTotalIssue, v))
}

// GetPullRequestEQ applies the EQ predicate on the "get_pull_request" field.
func GetPullRequestEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldGetPullRequest, v))
}

// GetPullRequestNEQ applies the NEQ predicate on the "get_pull_request" field.
func GetPullRequestNEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldGetPullRequest, v))
}

// GetIssueEQ applies the EQ predicate on the "get_issue" field.
func GetIssueEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldGetIssue, v))
}

// GetIssueNEQ applies the NEQ predicate on the "get_issue" field.
func GetIssueNEQ(v bool) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldGetIssue, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldUpdatedAt, v))
}

// PushedAtEQ applies the EQ predicate on the "pushed_at" field.
func PushedAtEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldEQ(FieldPushedAt, v))
}

// PushedAtNEQ applies the NEQ predicate on the "pushed_at" field.
func PushedAtNEQ(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNEQ(FieldPushedAt, v))
}

// PushedAtIn applies the In predicate on the "pushed_at" field.
func PushedAtIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldIn(FieldPushedAt, vs...))
}

// PushedAtNotIn applies the NotIn predicate on the "pushed_at" field.
func PushedAtNotIn(vs ...time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldNotIn(FieldPushedAt, vs...))
}

// PushedAtGT applies the GT predicate on the "pushed_at" field.
func PushedAtGT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGT(FieldPushedAt, v))
}

// PushedAtGTE applies the GTE predicate on the "pushed_at" field.
func PushedAtGTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldGTE(FieldPushedAt, v))
}

// PushedAtLT applies the LT predicate on the "pushed_at" field.
func PushedAtLT(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLT(FieldPushedAt, v))
}

// PushedAtLTE applies the LTE predicate on the "pushed_at" field.
func PushedAtLTE(v time.Time) predicate.Repository {
	return predicate.Repository(sql.FieldLTE(FieldPushedAt, v))
}

// HasPullRequests applies the HasEdge predicate on the "pull_requests" edge.
func HasPullRequests() predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PullRequestsTable, PullRequestsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPullRequestsWith applies the HasEdge predicate on the "pull_requests" edge with a given conditions (other predicates).
func HasPullRequestsWith(preds ...predicate.PullRequest) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PullRequestsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PullRequestsTable, PullRequestsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIssues applies the HasEdge predicate on the "issues" edge.
func HasIssues() predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IssuesTable, IssuesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIssuesWith applies the HasEdge predicate on the "issues" edge with a given conditions (other predicates).
func HasIssuesWith(preds ...predicate.Issue) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(IssuesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IssuesTable, IssuesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Repository) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Repository) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Repository) predicate.Repository {
	return predicate.Repository(func(s *sql.Selector) {
		p(s.Not())
	})
}
