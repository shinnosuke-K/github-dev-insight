// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/shinnosuke-K/github-dev-insight/ent/migrate"

	"github.com/shinnosuke-K/github-dev-insight/ent/commits"
	"github.com/shinnosuke-K/github-dev-insight/ent/issue"
	"github.com/shinnosuke-K/github-dev-insight/ent/pullrequest"
	"github.com/shinnosuke-K/github-dev-insight/ent/repository"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Commits is the client for interacting with the Commits builders.
	Commits *CommitsClient
	// Issue is the client for interacting with the Issue builders.
	Issue *IssueClient
	// PullRequest is the client for interacting with the PullRequest builders.
	PullRequest *PullRequestClient
	// Repository is the client for interacting with the Repository builders.
	Repository *RepositoryClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Commits = NewCommitsClient(c.config)
	c.Issue = NewIssueClient(c.config)
	c.PullRequest = NewPullRequestClient(c.config)
	c.Repository = NewRepositoryClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Commits:     NewCommitsClient(cfg),
		Issue:       NewIssueClient(cfg),
		PullRequest: NewPullRequestClient(cfg),
		Repository:  NewRepositoryClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:      cfg,
		Commits:     NewCommitsClient(cfg),
		Issue:       NewIssueClient(cfg),
		PullRequest: NewPullRequestClient(cfg),
		Repository:  NewRepositoryClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Commits.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Commits.Use(hooks...)
	c.Issue.Use(hooks...)
	c.PullRequest.Use(hooks...)
	c.Repository.Use(hooks...)
}

// CommitsClient is a client for the Commits schema.
type CommitsClient struct {
	config
}

// NewCommitsClient returns a client for the Commits from the given config.
func NewCommitsClient(c config) *CommitsClient {
	return &CommitsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `commits.Hooks(f(g(h())))`.
func (c *CommitsClient) Use(hooks ...Hook) {
	c.hooks.Commits = append(c.hooks.Commits, hooks...)
}

// Create returns a create builder for Commits.
func (c *CommitsClient) Create() *CommitsCreate {
	mutation := newCommitsMutation(c.config, OpCreate)
	return &CommitsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Commits entities.
func (c *CommitsClient) CreateBulk(builders ...*CommitsCreate) *CommitsCreateBulk {
	return &CommitsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Commits.
func (c *CommitsClient) Update() *CommitsUpdate {
	mutation := newCommitsMutation(c.config, OpUpdate)
	return &CommitsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommitsClient) UpdateOne(co *Commits) *CommitsUpdateOne {
	mutation := newCommitsMutation(c.config, OpUpdateOne, withCommits(co))
	return &CommitsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommitsClient) UpdateOneID(id uuid.UUID) *CommitsUpdateOne {
	mutation := newCommitsMutation(c.config, OpUpdateOne, withCommitsID(id))
	return &CommitsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Commits.
func (c *CommitsClient) Delete() *CommitsDelete {
	mutation := newCommitsMutation(c.config, OpDelete)
	return &CommitsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CommitsClient) DeleteOne(co *Commits) *CommitsDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CommitsClient) DeleteOneID(id uuid.UUID) *CommitsDeleteOne {
	builder := c.Delete().Where(commits.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommitsDeleteOne{builder}
}

// Query returns a query builder for Commits.
func (c *CommitsClient) Query() *CommitsQuery {
	return &CommitsQuery{
		config: c.config,
	}
}

// Get returns a Commits entity by its id.
func (c *CommitsClient) Get(ctx context.Context, id uuid.UUID) (*Commits, error) {
	return c.Query().Where(commits.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommitsClient) GetX(ctx context.Context, id uuid.UUID) *Commits {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPullRequest queries the pull_request edge of a Commits.
func (c *CommitsClient) QueryPullRequest(co *Commits) *PullRequestQuery {
	query := &PullRequestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commits.Table, commits.FieldID, id),
			sqlgraph.To(pullrequest.Table, pullrequest.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, commits.PullRequestTable, commits.PullRequestColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CommitsClient) Hooks() []Hook {
	return c.hooks.Commits
}

// IssueClient is a client for the Issue schema.
type IssueClient struct {
	config
}

// NewIssueClient returns a client for the Issue from the given config.
func NewIssueClient(c config) *IssueClient {
	return &IssueClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `issue.Hooks(f(g(h())))`.
func (c *IssueClient) Use(hooks ...Hook) {
	c.hooks.Issue = append(c.hooks.Issue, hooks...)
}

// Create returns a create builder for Issue.
func (c *IssueClient) Create() *IssueCreate {
	mutation := newIssueMutation(c.config, OpCreate)
	return &IssueCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Issue entities.
func (c *IssueClient) CreateBulk(builders ...*IssueCreate) *IssueCreateBulk {
	return &IssueCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Issue.
func (c *IssueClient) Update() *IssueUpdate {
	mutation := newIssueMutation(c.config, OpUpdate)
	return &IssueUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IssueClient) UpdateOne(i *Issue) *IssueUpdateOne {
	mutation := newIssueMutation(c.config, OpUpdateOne, withIssue(i))
	return &IssueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IssueClient) UpdateOneID(id uuid.UUID) *IssueUpdateOne {
	mutation := newIssueMutation(c.config, OpUpdateOne, withIssueID(id))
	return &IssueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Issue.
func (c *IssueClient) Delete() *IssueDelete {
	mutation := newIssueMutation(c.config, OpDelete)
	return &IssueDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *IssueClient) DeleteOne(i *Issue) *IssueDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *IssueClient) DeleteOneID(id uuid.UUID) *IssueDeleteOne {
	builder := c.Delete().Where(issue.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IssueDeleteOne{builder}
}

// Query returns a query builder for Issue.
func (c *IssueClient) Query() *IssueQuery {
	return &IssueQuery{
		config: c.config,
	}
}

// Get returns a Issue entity by its id.
func (c *IssueClient) Get(ctx context.Context, id uuid.UUID) (*Issue, error) {
	return c.Query().Where(issue.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IssueClient) GetX(ctx context.Context, id uuid.UUID) *Issue {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRepository queries the repository edge of a Issue.
func (c *IssueClient) QueryRepository(i *Issue) *RepositoryQuery {
	query := &RepositoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(issue.Table, issue.FieldID, id),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, issue.RepositoryTable, issue.RepositoryColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IssueClient) Hooks() []Hook {
	return c.hooks.Issue
}

// PullRequestClient is a client for the PullRequest schema.
type PullRequestClient struct {
	config
}

// NewPullRequestClient returns a client for the PullRequest from the given config.
func NewPullRequestClient(c config) *PullRequestClient {
	return &PullRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pullrequest.Hooks(f(g(h())))`.
func (c *PullRequestClient) Use(hooks ...Hook) {
	c.hooks.PullRequest = append(c.hooks.PullRequest, hooks...)
}

// Create returns a create builder for PullRequest.
func (c *PullRequestClient) Create() *PullRequestCreate {
	mutation := newPullRequestMutation(c.config, OpCreate)
	return &PullRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PullRequest entities.
func (c *PullRequestClient) CreateBulk(builders ...*PullRequestCreate) *PullRequestCreateBulk {
	return &PullRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PullRequest.
func (c *PullRequestClient) Update() *PullRequestUpdate {
	mutation := newPullRequestMutation(c.config, OpUpdate)
	return &PullRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PullRequestClient) UpdateOne(pr *PullRequest) *PullRequestUpdateOne {
	mutation := newPullRequestMutation(c.config, OpUpdateOne, withPullRequest(pr))
	return &PullRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PullRequestClient) UpdateOneID(id uuid.UUID) *PullRequestUpdateOne {
	mutation := newPullRequestMutation(c.config, OpUpdateOne, withPullRequestID(id))
	return &PullRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PullRequest.
func (c *PullRequestClient) Delete() *PullRequestDelete {
	mutation := newPullRequestMutation(c.config, OpDelete)
	return &PullRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PullRequestClient) DeleteOne(pr *PullRequest) *PullRequestDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PullRequestClient) DeleteOneID(id uuid.UUID) *PullRequestDeleteOne {
	builder := c.Delete().Where(pullrequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PullRequestDeleteOne{builder}
}

// Query returns a query builder for PullRequest.
func (c *PullRequestClient) Query() *PullRequestQuery {
	return &PullRequestQuery{
		config: c.config,
	}
}

// Get returns a PullRequest entity by its id.
func (c *PullRequestClient) Get(ctx context.Context, id uuid.UUID) (*PullRequest, error) {
	return c.Query().Where(pullrequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PullRequestClient) GetX(ctx context.Context, id uuid.UUID) *PullRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCommits queries the commits edge of a PullRequest.
func (c *PullRequestClient) QueryCommits(pr *PullRequest) *CommitsQuery {
	query := &CommitsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pullrequest.Table, pullrequest.FieldID, id),
			sqlgraph.To(commits.Table, commits.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, pullrequest.CommitsTable, pullrequest.CommitsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRepository queries the repository edge of a PullRequest.
func (c *PullRequestClient) QueryRepository(pr *PullRequest) *RepositoryQuery {
	query := &RepositoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pullrequest.Table, pullrequest.FieldID, id),
			sqlgraph.To(repository.Table, repository.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pullrequest.RepositoryTable, pullrequest.RepositoryColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PullRequestClient) Hooks() []Hook {
	return c.hooks.PullRequest
}

// RepositoryClient is a client for the Repository schema.
type RepositoryClient struct {
	config
}

// NewRepositoryClient returns a client for the Repository from the given config.
func NewRepositoryClient(c config) *RepositoryClient {
	return &RepositoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `repository.Hooks(f(g(h())))`.
func (c *RepositoryClient) Use(hooks ...Hook) {
	c.hooks.Repository = append(c.hooks.Repository, hooks...)
}

// Create returns a create builder for Repository.
func (c *RepositoryClient) Create() *RepositoryCreate {
	mutation := newRepositoryMutation(c.config, OpCreate)
	return &RepositoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Repository entities.
func (c *RepositoryClient) CreateBulk(builders ...*RepositoryCreate) *RepositoryCreateBulk {
	return &RepositoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Repository.
func (c *RepositoryClient) Update() *RepositoryUpdate {
	mutation := newRepositoryMutation(c.config, OpUpdate)
	return &RepositoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RepositoryClient) UpdateOne(r *Repository) *RepositoryUpdateOne {
	mutation := newRepositoryMutation(c.config, OpUpdateOne, withRepository(r))
	return &RepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RepositoryClient) UpdateOneID(id uuid.UUID) *RepositoryUpdateOne {
	mutation := newRepositoryMutation(c.config, OpUpdateOne, withRepositoryID(id))
	return &RepositoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Repository.
func (c *RepositoryClient) Delete() *RepositoryDelete {
	mutation := newRepositoryMutation(c.config, OpDelete)
	return &RepositoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RepositoryClient) DeleteOne(r *Repository) *RepositoryDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RepositoryClient) DeleteOneID(id uuid.UUID) *RepositoryDeleteOne {
	builder := c.Delete().Where(repository.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RepositoryDeleteOne{builder}
}

// Query returns a query builder for Repository.
func (c *RepositoryClient) Query() *RepositoryQuery {
	return &RepositoryQuery{
		config: c.config,
	}
}

// Get returns a Repository entity by its id.
func (c *RepositoryClient) Get(ctx context.Context, id uuid.UUID) (*Repository, error) {
	return c.Query().Where(repository.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RepositoryClient) GetX(ctx context.Context, id uuid.UUID) *Repository {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPullRequests queries the pull_requests edge of a Repository.
func (c *RepositoryClient) QueryPullRequests(r *Repository) *PullRequestQuery {
	query := &PullRequestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, id),
			sqlgraph.To(pullrequest.Table, pullrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, repository.PullRequestsTable, repository.PullRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIssues queries the issues edge of a Repository.
func (c *RepositoryClient) QueryIssues(r *Repository) *IssueQuery {
	query := &IssueQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repository.Table, repository.FieldID, id),
			sqlgraph.To(issue.Table, issue.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, repository.IssuesTable, repository.IssuesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RepositoryClient) Hooks() []Hook {
	return c.hooks.Repository
}
