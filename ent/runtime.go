// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/shinnosuke-K/github-dev-insight/ent/commit"
	"github.com/shinnosuke-K/github-dev-insight/ent/issue"
	"github.com/shinnosuke-K/github-dev-insight/ent/pullrequest"
	"github.com/shinnosuke-K/github-dev-insight/ent/repository"
	"github.com/shinnosuke-K/github-dev-insight/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	commitFields := schema.Commit{}.Fields()
	_ = commitFields
	// commitDescPullrequestID is the schema descriptor for pullrequest_id field.
	commitDescPullrequestID := commitFields[0].Descriptor()
	// commit.PullrequestIDValidator is a validator for the "pullrequest_id" field. It is called by the builders before save.
	commit.PullrequestIDValidator = func() func(string) error {
		validators := commitDescPullrequestID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(pullrequest_id string) error {
			for _, fn := range fns {
				if err := fn(pullrequest_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// commitDescGithubID is the schema descriptor for github_id field.
	commitDescGithubID := commitFields[1].Descriptor()
	// commit.GithubIDValidator is a validator for the "github_id" field. It is called by the builders before save.
	commit.GithubIDValidator = func() func(string) error {
		validators := commitDescGithubID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(github_id string) error {
			for _, fn := range fns {
				if err := fn(github_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// commitDescCommittedAt is the schema descriptor for committed_at field.
	commitDescCommittedAt := commitFields[3].Descriptor()
	// commit.DefaultCommittedAt holds the default value on creation for the committed_at field.
	commit.DefaultCommittedAt = commitDescCommittedAt.Default.(func() time.Time)
	// commitDescCreatedAt is the schema descriptor for created_at field.
	commitDescCreatedAt := commitFields[4].Descriptor()
	// commit.DefaultCreatedAt holds the default value on creation for the created_at field.
	commit.DefaultCreatedAt = commitDescCreatedAt.Default.(func() time.Time)
	issueFields := schema.Issue{}.Fields()
	_ = issueFields
	// issueDescRepositoryID is the schema descriptor for repository_id field.
	issueDescRepositoryID := issueFields[0].Descriptor()
	// issue.RepositoryIDValidator is a validator for the "repository_id" field. It is called by the builders before save.
	issue.RepositoryIDValidator = func() func(string) error {
		validators := issueDescRepositoryID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(repository_id string) error {
			for _, fn := range fns {
				if err := fn(repository_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// issueDescGithubID is the schema descriptor for github_id field.
	issueDescGithubID := issueFields[1].Descriptor()
	// issue.GithubIDValidator is a validator for the "github_id" field. It is called by the builders before save.
	issue.GithubIDValidator = func() func(string) error {
		validators := issueDescGithubID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(github_id string) error {
			for _, fn := range fns {
				if err := fn(github_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// issueDescTitle is the schema descriptor for title field.
	issueDescTitle := issueFields[2].Descriptor()
	// issue.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	issue.TitleValidator = func() func(string) error {
		validators := issueDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// issueDescCreatedAt is the schema descriptor for created_at field.
	issueDescCreatedAt := issueFields[3].Descriptor()
	// issue.DefaultCreatedAt holds the default value on creation for the created_at field.
	issue.DefaultCreatedAt = issueDescCreatedAt.Default.(func() time.Time)
	// issueDescUpdatedAt is the schema descriptor for updated_at field.
	issueDescUpdatedAt := issueFields[4].Descriptor()
	// issue.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	issue.DefaultUpdatedAt = issueDescUpdatedAt.Default.(func() time.Time)
	// issueDescLastEditedAt is the schema descriptor for last_edited_at field.
	issueDescLastEditedAt := issueFields[5].Descriptor()
	// issue.DefaultLastEditedAt holds the default value on creation for the last_edited_at field.
	issue.DefaultLastEditedAt = issueDescLastEditedAt.Default.(func() time.Time)
	// issueDescClosedAt is the schema descriptor for closed_at field.
	issueDescClosedAt := issueFields[6].Descriptor()
	// issue.DefaultClosedAt holds the default value on creation for the closed_at field.
	issue.DefaultClosedAt = issueDescClosedAt.Default.(func() time.Time)
	pullrequestFields := schema.PullRequest{}.Fields()
	_ = pullrequestFields
	// pullrequestDescRepositoryID is the schema descriptor for repository_id field.
	pullrequestDescRepositoryID := pullrequestFields[0].Descriptor()
	// pullrequest.RepositoryIDValidator is a validator for the "repository_id" field. It is called by the builders before save.
	pullrequest.RepositoryIDValidator = func() func(string) error {
		validators := pullrequestDescRepositoryID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(repository_id string) error {
			for _, fn := range fns {
				if err := fn(repository_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// pullrequestDescGithubID is the schema descriptor for github_id field.
	pullrequestDescGithubID := pullrequestFields[1].Descriptor()
	// pullrequest.GithubIDValidator is a validator for the "github_id" field. It is called by the builders before save.
	pullrequest.GithubIDValidator = func() func(string) error {
		validators := pullrequestDescGithubID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(github_id string) error {
			for _, fn := range fns {
				if err := fn(github_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// pullrequestDescTitle is the schema descriptor for title field.
	pullrequestDescTitle := pullrequestFields[2].Descriptor()
	// pullrequest.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	pullrequest.TitleValidator = func() func(string) error {
		validators := pullrequestDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// pullrequestDescTotalCommits is the schema descriptor for total_commits field.
	pullrequestDescTotalCommits := pullrequestFields[3].Descriptor()
	// pullrequest.DefaultTotalCommits holds the default value on creation for the total_commits field.
	pullrequest.DefaultTotalCommits = pullrequestDescTotalCommits.Default.(int64)
	// pullrequest.TotalCommitsValidator is a validator for the "total_commits" field. It is called by the builders before save.
	pullrequest.TotalCommitsValidator = pullrequestDescTotalCommits.Validators[0].(func(int64) error)
	// pullrequestDescCreatedAt is the schema descriptor for created_at field.
	pullrequestDescCreatedAt := pullrequestFields[4].Descriptor()
	// pullrequest.DefaultCreatedAt holds the default value on creation for the created_at field.
	pullrequest.DefaultCreatedAt = pullrequestDescCreatedAt.Default.(func() time.Time)
	// pullrequestDescUpdatedAt is the schema descriptor for updated_at field.
	pullrequestDescUpdatedAt := pullrequestFields[5].Descriptor()
	// pullrequest.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	pullrequest.DefaultUpdatedAt = pullrequestDescUpdatedAt.Default.(func() time.Time)
	// pullrequestDescClosedAt is the schema descriptor for closed_at field.
	pullrequestDescClosedAt := pullrequestFields[6].Descriptor()
	// pullrequest.DefaultClosedAt holds the default value on creation for the closed_at field.
	pullrequest.DefaultClosedAt = pullrequestDescClosedAt.Default.(func() time.Time)
	// pullrequestDescMergedAt is the schema descriptor for merged_at field.
	pullrequestDescMergedAt := pullrequestFields[7].Descriptor()
	// pullrequest.DefaultMergedAt holds the default value on creation for the merged_at field.
	pullrequest.DefaultMergedAt = pullrequestDescMergedAt.Default.(func() time.Time)
	repositoryFields := schema.Repository{}.Fields()
	_ = repositoryFields
	// repositoryDescGithubID is the schema descriptor for github_id field.
	repositoryDescGithubID := repositoryFields[0].Descriptor()
	// repository.GithubIDValidator is a validator for the "github_id" field. It is called by the builders before save.
	repository.GithubIDValidator = func() func(string) error {
		validators := repositoryDescGithubID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(github_id string) error {
			for _, fn := range fns {
				if err := fn(github_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// repositoryDescOwner is the schema descriptor for owner field.
	repositoryDescOwner := repositoryFields[1].Descriptor()
	// repository.OwnerValidator is a validator for the "owner" field. It is called by the builders before save.
	repository.OwnerValidator = func() func(string) error {
		validators := repositoryDescOwner.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(owner string) error {
			for _, fn := range fns {
				if err := fn(owner); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// repositoryDescName is the schema descriptor for name field.
	repositoryDescName := repositoryFields[2].Descriptor()
	// repository.NameValidator is a validator for the "name" field. It is called by the builders before save.
	repository.NameValidator = func() func(string) error {
		validators := repositoryDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// repositoryDescTotalPr is the schema descriptor for total_pr field.
	repositoryDescTotalPr := repositoryFields[4].Descriptor()
	// repository.DefaultTotalPr holds the default value on creation for the total_pr field.
	repository.DefaultTotalPr = repositoryDescTotalPr.Default.(int64)
	// repository.TotalPrValidator is a validator for the "total_pr" field. It is called by the builders before save.
	repository.TotalPrValidator = repositoryDescTotalPr.Validators[0].(func(int64) error)
	// repositoryDescTotalIssue is the schema descriptor for total_issue field.
	repositoryDescTotalIssue := repositoryFields[5].Descriptor()
	// repository.DefaultTotalIssue holds the default value on creation for the total_issue field.
	repository.DefaultTotalIssue = repositoryDescTotalIssue.Default.(int64)
	// repository.TotalIssueValidator is a validator for the "total_issue" field. It is called by the builders before save.
	repository.TotalIssueValidator = repositoryDescTotalIssue.Validators[0].(func(int64) error)
	// repositoryDescCreatedAt is the schema descriptor for created_at field.
	repositoryDescCreatedAt := repositoryFields[6].Descriptor()
	// repository.DefaultCreatedAt holds the default value on creation for the created_at field.
	repository.DefaultCreatedAt = repositoryDescCreatedAt.Default.(func() time.Time)
	// repositoryDescUpdatedAt is the schema descriptor for updated_at field.
	repositoryDescUpdatedAt := repositoryFields[7].Descriptor()
	// repository.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	repository.DefaultUpdatedAt = repositoryDescUpdatedAt.Default.(func() time.Time)
	// repositoryDescPushedAt is the schema descriptor for pushed_at field.
	repositoryDescPushedAt := repositoryFields[8].Descriptor()
	// repository.DefaultPushedAt holds the default value on creation for the pushed_at field.
	repository.DefaultPushedAt = repositoryDescPushedAt.Default.(func() time.Time)
}
