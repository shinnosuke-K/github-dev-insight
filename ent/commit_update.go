// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shinnosuke-K/github-dev-insight/ent/commit"
	"github.com/shinnosuke-K/github-dev-insight/ent/predicate"
	"github.com/shinnosuke-K/github-dev-insight/ent/pullrequest"
)

// CommitUpdate is the builder for updating Commit entities.
type CommitUpdate struct {
	config
	hooks    []Hook
	mutation *CommitMutation
}

// Where appends a list predicates to the CommitUpdate builder.
func (cu *CommitUpdate) Where(ps ...predicate.Commit) *CommitUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetPullrequestID sets the "pullrequest_id" field.
func (cu *CommitUpdate) SetPullrequestID(s string) *CommitUpdate {
	cu.mutation.SetPullrequestID(s)
	return cu
}

// SetGithubID sets the "github_id" field.
func (cu *CommitUpdate) SetGithubID(s string) *CommitUpdate {
	cu.mutation.SetGithubID(s)
	return cu
}

// SetMessage sets the "message" field.
func (cu *CommitUpdate) SetMessage(s string) *CommitUpdate {
	cu.mutation.SetMessage(s)
	return cu
}

// SetCommittedAt sets the "committed_at" field.
func (cu *CommitUpdate) SetCommittedAt(t time.Time) *CommitUpdate {
	cu.mutation.SetCommittedAt(t)
	return cu
}

// SetNillableCommittedAt sets the "committed_at" field if the given value is not nil.
func (cu *CommitUpdate) SetNillableCommittedAt(t *time.Time) *CommitUpdate {
	if t != nil {
		cu.SetCommittedAt(*t)
	}
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CommitUpdate) SetCreatedAt(t time.Time) *CommitUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CommitUpdate) SetNillableCreatedAt(t *time.Time) *CommitUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetPullRequestsID sets the "pull_requests" edge to the PullRequest entity by ID.
func (cu *CommitUpdate) SetPullRequestsID(id int) *CommitUpdate {
	cu.mutation.SetPullRequestsID(id)
	return cu
}

// SetNillablePullRequestsID sets the "pull_requests" edge to the PullRequest entity by ID if the given value is not nil.
func (cu *CommitUpdate) SetNillablePullRequestsID(id *int) *CommitUpdate {
	if id != nil {
		cu = cu.SetPullRequestsID(*id)
	}
	return cu
}

// SetPullRequests sets the "pull_requests" edge to the PullRequest entity.
func (cu *CommitUpdate) SetPullRequests(p *PullRequest) *CommitUpdate {
	return cu.SetPullRequestsID(p.ID)
}

// Mutation returns the CommitMutation object of the builder.
func (cu *CommitUpdate) Mutation() *CommitMutation {
	return cu.mutation
}

// ClearPullRequests clears the "pull_requests" edge to the PullRequest entity.
func (cu *CommitUpdate) ClearPullRequests() *CommitUpdate {
	cu.mutation.ClearPullRequests()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommitUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommitUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommitUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommitUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CommitUpdate) check() error {
	if v, ok := cu.mutation.PullrequestID(); ok {
		if err := commit.PullrequestIDValidator(v); err != nil {
			return &ValidationError{Name: "pullrequest_id", err: fmt.Errorf("ent: validator failed for field \"pullrequest_id\": %w", err)}
		}
	}
	if v, ok := cu.mutation.GithubID(); ok {
		if err := commit.GithubIDValidator(v); err != nil {
			return &ValidationError{Name: "github_id", err: fmt.Errorf("ent: validator failed for field \"github_id\": %w", err)}
		}
	}
	return nil
}

func (cu *CommitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   commit.Table,
			Columns: commit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: commit.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.PullrequestID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: commit.FieldPullrequestID,
		})
	}
	if value, ok := cu.mutation.GithubID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: commit.FieldGithubID,
		})
	}
	if value, ok := cu.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: commit.FieldMessage,
		})
	}
	if value, ok := cu.mutation.CommittedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commit.FieldCommittedAt,
		})
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commit.FieldCreatedAt,
		})
	}
	if cu.mutation.PullRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commit.PullRequestsTable,
			Columns: []string{commit.PullRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pullrequest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PullRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commit.PullRequestsTable,
			Columns: []string{commit.PullRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pullrequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CommitUpdateOne is the builder for updating a single Commit entity.
type CommitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommitMutation
}

// SetPullrequestID sets the "pullrequest_id" field.
func (cuo *CommitUpdateOne) SetPullrequestID(s string) *CommitUpdateOne {
	cuo.mutation.SetPullrequestID(s)
	return cuo
}

// SetGithubID sets the "github_id" field.
func (cuo *CommitUpdateOne) SetGithubID(s string) *CommitUpdateOne {
	cuo.mutation.SetGithubID(s)
	return cuo
}

// SetMessage sets the "message" field.
func (cuo *CommitUpdateOne) SetMessage(s string) *CommitUpdateOne {
	cuo.mutation.SetMessage(s)
	return cuo
}

// SetCommittedAt sets the "committed_at" field.
func (cuo *CommitUpdateOne) SetCommittedAt(t time.Time) *CommitUpdateOne {
	cuo.mutation.SetCommittedAt(t)
	return cuo
}

// SetNillableCommittedAt sets the "committed_at" field if the given value is not nil.
func (cuo *CommitUpdateOne) SetNillableCommittedAt(t *time.Time) *CommitUpdateOne {
	if t != nil {
		cuo.SetCommittedAt(*t)
	}
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CommitUpdateOne) SetCreatedAt(t time.Time) *CommitUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CommitUpdateOne) SetNillableCreatedAt(t *time.Time) *CommitUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetPullRequestsID sets the "pull_requests" edge to the PullRequest entity by ID.
func (cuo *CommitUpdateOne) SetPullRequestsID(id int) *CommitUpdateOne {
	cuo.mutation.SetPullRequestsID(id)
	return cuo
}

// SetNillablePullRequestsID sets the "pull_requests" edge to the PullRequest entity by ID if the given value is not nil.
func (cuo *CommitUpdateOne) SetNillablePullRequestsID(id *int) *CommitUpdateOne {
	if id != nil {
		cuo = cuo.SetPullRequestsID(*id)
	}
	return cuo
}

// SetPullRequests sets the "pull_requests" edge to the PullRequest entity.
func (cuo *CommitUpdateOne) SetPullRequests(p *PullRequest) *CommitUpdateOne {
	return cuo.SetPullRequestsID(p.ID)
}

// Mutation returns the CommitMutation object of the builder.
func (cuo *CommitUpdateOne) Mutation() *CommitMutation {
	return cuo.mutation
}

// ClearPullRequests clears the "pull_requests" edge to the PullRequest entity.
func (cuo *CommitUpdateOne) ClearPullRequests() *CommitUpdateOne {
	cuo.mutation.ClearPullRequests()
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommitUpdateOne) Select(field string, fields ...string) *CommitUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Commit entity.
func (cuo *CommitUpdateOne) Save(ctx context.Context) (*Commit, error) {
	var (
		err  error
		node *Commit
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommitUpdateOne) SaveX(ctx context.Context) *Commit {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommitUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommitUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CommitUpdateOne) check() error {
	if v, ok := cuo.mutation.PullrequestID(); ok {
		if err := commit.PullrequestIDValidator(v); err != nil {
			return &ValidationError{Name: "pullrequest_id", err: fmt.Errorf("ent: validator failed for field \"pullrequest_id\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.GithubID(); ok {
		if err := commit.GithubIDValidator(v); err != nil {
			return &ValidationError{Name: "github_id", err: fmt.Errorf("ent: validator failed for field \"github_id\": %w", err)}
		}
	}
	return nil
}

func (cuo *CommitUpdateOne) sqlSave(ctx context.Context) (_node *Commit, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   commit.Table,
			Columns: commit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: commit.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Commit.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, commit.FieldID)
		for _, f := range fields {
			if !commit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != commit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.PullrequestID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: commit.FieldPullrequestID,
		})
	}
	if value, ok := cuo.mutation.GithubID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: commit.FieldGithubID,
		})
	}
	if value, ok := cuo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: commit.FieldMessage,
		})
	}
	if value, ok := cuo.mutation.CommittedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commit.FieldCommittedAt,
		})
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commit.FieldCreatedAt,
		})
	}
	if cuo.mutation.PullRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commit.PullRequestsTable,
			Columns: []string{commit.PullRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pullrequest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PullRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commit.PullRequestsTable,
			Columns: []string{commit.PullRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pullrequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Commit{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
