// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shinnosuke-K/github-dev-insight/ent/issue"
	"github.com/shinnosuke-K/github-dev-insight/ent/predicate"
	"github.com/shinnosuke-K/github-dev-insight/ent/pullrequest"
	"github.com/shinnosuke-K/github-dev-insight/ent/repository"
)

// RepositoryUpdate is the builder for updating Repository entities.
type RepositoryUpdate struct {
	config
	hooks    []Hook
	mutation *RepositoryMutation
}

// Where appends a list predicates to the RepositoryUpdate builder.
func (ru *RepositoryUpdate) Where(ps ...predicate.Repository) *RepositoryUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetGithubID sets the "github_id" field.
func (ru *RepositoryUpdate) SetGithubID(s string) *RepositoryUpdate {
	ru.mutation.SetGithubID(s)
	return ru
}

// SetOwner sets the "owner" field.
func (ru *RepositoryUpdate) SetOwner(s string) *RepositoryUpdate {
	ru.mutation.SetOwner(s)
	return ru
}

// SetName sets the "name" field.
func (ru *RepositoryUpdate) SetName(s string) *RepositoryUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetDescription sets the "description" field.
func (ru *RepositoryUpdate) SetDescription(s string) *RepositoryUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableDescription(s *string) *RepositoryUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// ClearDescription clears the value of the "description" field.
func (ru *RepositoryUpdate) ClearDescription() *RepositoryUpdate {
	ru.mutation.ClearDescription()
	return ru
}

// SetTotalPr sets the "total_pr" field.
func (ru *RepositoryUpdate) SetTotalPr(i int64) *RepositoryUpdate {
	ru.mutation.ResetTotalPr()
	ru.mutation.SetTotalPr(i)
	return ru
}

// SetNillableTotalPr sets the "total_pr" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableTotalPr(i *int64) *RepositoryUpdate {
	if i != nil {
		ru.SetTotalPr(*i)
	}
	return ru
}

// AddTotalPr adds i to the "total_pr" field.
func (ru *RepositoryUpdate) AddTotalPr(i int64) *RepositoryUpdate {
	ru.mutation.AddTotalPr(i)
	return ru
}

// SetTotalIssue sets the "total_issue" field.
func (ru *RepositoryUpdate) SetTotalIssue(i int64) *RepositoryUpdate {
	ru.mutation.ResetTotalIssue()
	ru.mutation.SetTotalIssue(i)
	return ru
}

// SetNillableTotalIssue sets the "total_issue" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableTotalIssue(i *int64) *RepositoryUpdate {
	if i != nil {
		ru.SetTotalIssue(*i)
	}
	return ru
}

// AddTotalIssue adds i to the "total_issue" field.
func (ru *RepositoryUpdate) AddTotalIssue(i int64) *RepositoryUpdate {
	ru.mutation.AddTotalIssue(i)
	return ru
}

// SetGetPullRequest sets the "get_pull_request" field.
func (ru *RepositoryUpdate) SetGetPullRequest(b bool) *RepositoryUpdate {
	ru.mutation.SetGetPullRequest(b)
	return ru
}

// SetNillableGetPullRequest sets the "get_pull_request" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableGetPullRequest(b *bool) *RepositoryUpdate {
	if b != nil {
		ru.SetGetPullRequest(*b)
	}
	return ru
}

// SetGetIssue sets the "get_issue" field.
func (ru *RepositoryUpdate) SetGetIssue(b bool) *RepositoryUpdate {
	ru.mutation.SetGetIssue(b)
	return ru
}

// SetNillableGetIssue sets the "get_issue" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableGetIssue(b *bool) *RepositoryUpdate {
	if b != nil {
		ru.SetGetIssue(*b)
	}
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *RepositoryUpdate) SetCreatedAt(t time.Time) *RepositoryUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableCreatedAt(t *time.Time) *RepositoryUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RepositoryUpdate) SetUpdatedAt(t time.Time) *RepositoryUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillableUpdatedAt(t *time.Time) *RepositoryUpdate {
	if t != nil {
		ru.SetUpdatedAt(*t)
	}
	return ru
}

// SetPushedAt sets the "pushed_at" field.
func (ru *RepositoryUpdate) SetPushedAt(t time.Time) *RepositoryUpdate {
	ru.mutation.SetPushedAt(t)
	return ru
}

// SetNillablePushedAt sets the "pushed_at" field if the given value is not nil.
func (ru *RepositoryUpdate) SetNillablePushedAt(t *time.Time) *RepositoryUpdate {
	if t != nil {
		ru.SetPushedAt(*t)
	}
	return ru
}

// AddPullRequestIDs adds the "pull_requests" edge to the PullRequest entity by IDs.
func (ru *RepositoryUpdate) AddPullRequestIDs(ids ...uuid.UUID) *RepositoryUpdate {
	ru.mutation.AddPullRequestIDs(ids...)
	return ru
}

// AddPullRequests adds the "pull_requests" edges to the PullRequest entity.
func (ru *RepositoryUpdate) AddPullRequests(p ...*PullRequest) *RepositoryUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.AddPullRequestIDs(ids...)
}

// AddIssueIDs adds the "issues" edge to the Issue entity by IDs.
func (ru *RepositoryUpdate) AddIssueIDs(ids ...uuid.UUID) *RepositoryUpdate {
	ru.mutation.AddIssueIDs(ids...)
	return ru
}

// AddIssues adds the "issues" edges to the Issue entity.
func (ru *RepositoryUpdate) AddIssues(i ...*Issue) *RepositoryUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ru.AddIssueIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (ru *RepositoryUpdate) Mutation() *RepositoryMutation {
	return ru.mutation
}

// ClearPullRequests clears all "pull_requests" edges to the PullRequest entity.
func (ru *RepositoryUpdate) ClearPullRequests() *RepositoryUpdate {
	ru.mutation.ClearPullRequests()
	return ru
}

// RemovePullRequestIDs removes the "pull_requests" edge to PullRequest entities by IDs.
func (ru *RepositoryUpdate) RemovePullRequestIDs(ids ...uuid.UUID) *RepositoryUpdate {
	ru.mutation.RemovePullRequestIDs(ids...)
	return ru
}

// RemovePullRequests removes "pull_requests" edges to PullRequest entities.
func (ru *RepositoryUpdate) RemovePullRequests(p ...*PullRequest) *RepositoryUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.RemovePullRequestIDs(ids...)
}

// ClearIssues clears all "issues" edges to the Issue entity.
func (ru *RepositoryUpdate) ClearIssues() *RepositoryUpdate {
	ru.mutation.ClearIssues()
	return ru
}

// RemoveIssueIDs removes the "issues" edge to Issue entities by IDs.
func (ru *RepositoryUpdate) RemoveIssueIDs(ids ...uuid.UUID) *RepositoryUpdate {
	ru.mutation.RemoveIssueIDs(ids...)
	return ru
}

// RemoveIssues removes "issues" edges to Issue entities.
func (ru *RepositoryUpdate) RemoveIssues(i ...*Issue) *RepositoryUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ru.RemoveIssueIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RepositoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, RepositoryMutation](ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RepositoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RepositoryUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RepositoryUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RepositoryUpdate) check() error {
	if v, ok := ru.mutation.GithubID(); ok {
		if err := repository.GithubIDValidator(v); err != nil {
			return &ValidationError{Name: "github_id", err: fmt.Errorf(`ent: validator failed for field "Repository.github_id": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Owner(); ok {
		if err := repository.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf(`ent: validator failed for field "Repository.owner": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Name(); ok {
		if err := repository.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Repository.name": %w`, err)}
		}
	}
	if v, ok := ru.mutation.TotalPr(); ok {
		if err := repository.TotalPrValidator(v); err != nil {
			return &ValidationError{Name: "total_pr", err: fmt.Errorf(`ent: validator failed for field "Repository.total_pr": %w`, err)}
		}
	}
	if v, ok := ru.mutation.TotalIssue(); ok {
		if err := repository.TotalIssueValidator(v); err != nil {
			return &ValidationError{Name: "total_issue", err: fmt.Errorf(`ent: validator failed for field "Repository.total_issue": %w`, err)}
		}
	}
	return nil
}

func (ru *RepositoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(repository.Table, repository.Columns, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.GithubID(); ok {
		_spec.SetField(repository.FieldGithubID, field.TypeString, value)
	}
	if value, ok := ru.mutation.Owner(); ok {
		_spec.SetField(repository.FieldOwner, field.TypeString, value)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(repository.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(repository.FieldDescription, field.TypeString, value)
	}
	if ru.mutation.DescriptionCleared() {
		_spec.ClearField(repository.FieldDescription, field.TypeString)
	}
	if value, ok := ru.mutation.TotalPr(); ok {
		_spec.SetField(repository.FieldTotalPr, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedTotalPr(); ok {
		_spec.AddField(repository.FieldTotalPr, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.TotalIssue(); ok {
		_spec.SetField(repository.FieldTotalIssue, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedTotalIssue(); ok {
		_spec.AddField(repository.FieldTotalIssue, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.GetPullRequest(); ok {
		_spec.SetField(repository.FieldGetPullRequest, field.TypeBool, value)
	}
	if value, ok := ru.mutation.GetIssue(); ok {
		_spec.SetField(repository.FieldGetIssue, field.TypeBool, value)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(repository.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(repository.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.PushedAt(); ok {
		_spec.SetField(repository.FieldPushedAt, field.TypeTime, value)
	}
	if ru.mutation.PullRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.PullRequestsTable,
			Columns: []string{repository.PullRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pullrequest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedPullRequestsIDs(); len(nodes) > 0 && !ru.mutation.PullRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.PullRequestsTable,
			Columns: []string{repository.PullRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pullrequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.PullRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.PullRequestsTable,
			Columns: []string{repository.PullRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pullrequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.IssuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.IssuesTable,
			Columns: []string{repository.IssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: issue.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedIssuesIDs(); len(nodes) > 0 && !ru.mutation.IssuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.IssuesTable,
			Columns: []string{repository.IssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: issue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.IssuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.IssuesTable,
			Columns: []string{repository.IssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: issue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RepositoryUpdateOne is the builder for updating a single Repository entity.
type RepositoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RepositoryMutation
}

// SetGithubID sets the "github_id" field.
func (ruo *RepositoryUpdateOne) SetGithubID(s string) *RepositoryUpdateOne {
	ruo.mutation.SetGithubID(s)
	return ruo
}

// SetOwner sets the "owner" field.
func (ruo *RepositoryUpdateOne) SetOwner(s string) *RepositoryUpdateOne {
	ruo.mutation.SetOwner(s)
	return ruo
}

// SetName sets the "name" field.
func (ruo *RepositoryUpdateOne) SetName(s string) *RepositoryUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *RepositoryUpdateOne) SetDescription(s string) *RepositoryUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableDescription(s *string) *RepositoryUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// ClearDescription clears the value of the "description" field.
func (ruo *RepositoryUpdateOne) ClearDescription() *RepositoryUpdateOne {
	ruo.mutation.ClearDescription()
	return ruo
}

// SetTotalPr sets the "total_pr" field.
func (ruo *RepositoryUpdateOne) SetTotalPr(i int64) *RepositoryUpdateOne {
	ruo.mutation.ResetTotalPr()
	ruo.mutation.SetTotalPr(i)
	return ruo
}

// SetNillableTotalPr sets the "total_pr" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableTotalPr(i *int64) *RepositoryUpdateOne {
	if i != nil {
		ruo.SetTotalPr(*i)
	}
	return ruo
}

// AddTotalPr adds i to the "total_pr" field.
func (ruo *RepositoryUpdateOne) AddTotalPr(i int64) *RepositoryUpdateOne {
	ruo.mutation.AddTotalPr(i)
	return ruo
}

// SetTotalIssue sets the "total_issue" field.
func (ruo *RepositoryUpdateOne) SetTotalIssue(i int64) *RepositoryUpdateOne {
	ruo.mutation.ResetTotalIssue()
	ruo.mutation.SetTotalIssue(i)
	return ruo
}

// SetNillableTotalIssue sets the "total_issue" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableTotalIssue(i *int64) *RepositoryUpdateOne {
	if i != nil {
		ruo.SetTotalIssue(*i)
	}
	return ruo
}

// AddTotalIssue adds i to the "total_issue" field.
func (ruo *RepositoryUpdateOne) AddTotalIssue(i int64) *RepositoryUpdateOne {
	ruo.mutation.AddTotalIssue(i)
	return ruo
}

// SetGetPullRequest sets the "get_pull_request" field.
func (ruo *RepositoryUpdateOne) SetGetPullRequest(b bool) *RepositoryUpdateOne {
	ruo.mutation.SetGetPullRequest(b)
	return ruo
}

// SetNillableGetPullRequest sets the "get_pull_request" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableGetPullRequest(b *bool) *RepositoryUpdateOne {
	if b != nil {
		ruo.SetGetPullRequest(*b)
	}
	return ruo
}

// SetGetIssue sets the "get_issue" field.
func (ruo *RepositoryUpdateOne) SetGetIssue(b bool) *RepositoryUpdateOne {
	ruo.mutation.SetGetIssue(b)
	return ruo
}

// SetNillableGetIssue sets the "get_issue" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableGetIssue(b *bool) *RepositoryUpdateOne {
	if b != nil {
		ruo.SetGetIssue(*b)
	}
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *RepositoryUpdateOne) SetCreatedAt(t time.Time) *RepositoryUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableCreatedAt(t *time.Time) *RepositoryUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RepositoryUpdateOne) SetUpdatedAt(t time.Time) *RepositoryUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillableUpdatedAt(t *time.Time) *RepositoryUpdateOne {
	if t != nil {
		ruo.SetUpdatedAt(*t)
	}
	return ruo
}

// SetPushedAt sets the "pushed_at" field.
func (ruo *RepositoryUpdateOne) SetPushedAt(t time.Time) *RepositoryUpdateOne {
	ruo.mutation.SetPushedAt(t)
	return ruo
}

// SetNillablePushedAt sets the "pushed_at" field if the given value is not nil.
func (ruo *RepositoryUpdateOne) SetNillablePushedAt(t *time.Time) *RepositoryUpdateOne {
	if t != nil {
		ruo.SetPushedAt(*t)
	}
	return ruo
}

// AddPullRequestIDs adds the "pull_requests" edge to the PullRequest entity by IDs.
func (ruo *RepositoryUpdateOne) AddPullRequestIDs(ids ...uuid.UUID) *RepositoryUpdateOne {
	ruo.mutation.AddPullRequestIDs(ids...)
	return ruo
}

// AddPullRequests adds the "pull_requests" edges to the PullRequest entity.
func (ruo *RepositoryUpdateOne) AddPullRequests(p ...*PullRequest) *RepositoryUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.AddPullRequestIDs(ids...)
}

// AddIssueIDs adds the "issues" edge to the Issue entity by IDs.
func (ruo *RepositoryUpdateOne) AddIssueIDs(ids ...uuid.UUID) *RepositoryUpdateOne {
	ruo.mutation.AddIssueIDs(ids...)
	return ruo
}

// AddIssues adds the "issues" edges to the Issue entity.
func (ruo *RepositoryUpdateOne) AddIssues(i ...*Issue) *RepositoryUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ruo.AddIssueIDs(ids...)
}

// Mutation returns the RepositoryMutation object of the builder.
func (ruo *RepositoryUpdateOne) Mutation() *RepositoryMutation {
	return ruo.mutation
}

// ClearPullRequests clears all "pull_requests" edges to the PullRequest entity.
func (ruo *RepositoryUpdateOne) ClearPullRequests() *RepositoryUpdateOne {
	ruo.mutation.ClearPullRequests()
	return ruo
}

// RemovePullRequestIDs removes the "pull_requests" edge to PullRequest entities by IDs.
func (ruo *RepositoryUpdateOne) RemovePullRequestIDs(ids ...uuid.UUID) *RepositoryUpdateOne {
	ruo.mutation.RemovePullRequestIDs(ids...)
	return ruo
}

// RemovePullRequests removes "pull_requests" edges to PullRequest entities.
func (ruo *RepositoryUpdateOne) RemovePullRequests(p ...*PullRequest) *RepositoryUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.RemovePullRequestIDs(ids...)
}

// ClearIssues clears all "issues" edges to the Issue entity.
func (ruo *RepositoryUpdateOne) ClearIssues() *RepositoryUpdateOne {
	ruo.mutation.ClearIssues()
	return ruo
}

// RemoveIssueIDs removes the "issues" edge to Issue entities by IDs.
func (ruo *RepositoryUpdateOne) RemoveIssueIDs(ids ...uuid.UUID) *RepositoryUpdateOne {
	ruo.mutation.RemoveIssueIDs(ids...)
	return ruo
}

// RemoveIssues removes "issues" edges to Issue entities.
func (ruo *RepositoryUpdateOne) RemoveIssues(i ...*Issue) *RepositoryUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ruo.RemoveIssueIDs(ids...)
}

// Where appends a list predicates to the RepositoryUpdate builder.
func (ruo *RepositoryUpdateOne) Where(ps ...predicate.Repository) *RepositoryUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RepositoryUpdateOne) Select(field string, fields ...string) *RepositoryUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Repository entity.
func (ruo *RepositoryUpdateOne) Save(ctx context.Context) (*Repository, error) {
	return withHooks[*Repository, RepositoryMutation](ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RepositoryUpdateOne) SaveX(ctx context.Context) *Repository {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RepositoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RepositoryUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RepositoryUpdateOne) check() error {
	if v, ok := ruo.mutation.GithubID(); ok {
		if err := repository.GithubIDValidator(v); err != nil {
			return &ValidationError{Name: "github_id", err: fmt.Errorf(`ent: validator failed for field "Repository.github_id": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Owner(); ok {
		if err := repository.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf(`ent: validator failed for field "Repository.owner": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Name(); ok {
		if err := repository.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Repository.name": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.TotalPr(); ok {
		if err := repository.TotalPrValidator(v); err != nil {
			return &ValidationError{Name: "total_pr", err: fmt.Errorf(`ent: validator failed for field "Repository.total_pr": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.TotalIssue(); ok {
		if err := repository.TotalIssueValidator(v); err != nil {
			return &ValidationError{Name: "total_issue", err: fmt.Errorf(`ent: validator failed for field "Repository.total_issue": %w`, err)}
		}
	}
	return nil
}

func (ruo *RepositoryUpdateOne) sqlSave(ctx context.Context) (_node *Repository, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(repository.Table, repository.Columns, sqlgraph.NewFieldSpec(repository.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Repository.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, repository.FieldID)
		for _, f := range fields {
			if !repository.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != repository.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.GithubID(); ok {
		_spec.SetField(repository.FieldGithubID, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Owner(); ok {
		_spec.SetField(repository.FieldOwner, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(repository.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(repository.FieldDescription, field.TypeString, value)
	}
	if ruo.mutation.DescriptionCleared() {
		_spec.ClearField(repository.FieldDescription, field.TypeString)
	}
	if value, ok := ruo.mutation.TotalPr(); ok {
		_spec.SetField(repository.FieldTotalPr, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedTotalPr(); ok {
		_spec.AddField(repository.FieldTotalPr, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.TotalIssue(); ok {
		_spec.SetField(repository.FieldTotalIssue, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedTotalIssue(); ok {
		_spec.AddField(repository.FieldTotalIssue, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.GetPullRequest(); ok {
		_spec.SetField(repository.FieldGetPullRequest, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.GetIssue(); ok {
		_spec.SetField(repository.FieldGetIssue, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(repository.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(repository.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.PushedAt(); ok {
		_spec.SetField(repository.FieldPushedAt, field.TypeTime, value)
	}
	if ruo.mutation.PullRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.PullRequestsTable,
			Columns: []string{repository.PullRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pullrequest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedPullRequestsIDs(); len(nodes) > 0 && !ruo.mutation.PullRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.PullRequestsTable,
			Columns: []string{repository.PullRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pullrequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.PullRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.PullRequestsTable,
			Columns: []string{repository.PullRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: pullrequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.IssuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.IssuesTable,
			Columns: []string{repository.IssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: issue.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedIssuesIDs(); len(nodes) > 0 && !ruo.mutation.IssuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.IssuesTable,
			Columns: []string{repository.IssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: issue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.IssuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   repository.IssuesTable,
			Columns: []string{repository.IssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: issue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Repository{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
